---
title: "Patient-Level Prediction Pipeline in Julia with OMOP CDM"
description: "A summary of my project - Patient-Level Prediction"
author: "Kosuri Lakshmi Indu"
date: "4/8/2025"
bibliography: ./references.bib
toc: true
engine: julia
image: false
categories:
  - patient-level prediction
  - observational health
  - analysis
---


# Hi Everyone! üëã

Hi everyone! I‚Äôm **Kosuri Lakshmi Indu**, a third-year undergraduate student in Computer Science and an aspiring GSoC 2025 contributor. My interest in using data science for public health led me to the **JuliaHealth** community and, under the mentorship of **Jacob S. Zelko**, I began working on a project titled **PLP-Pipeline**. This project focuses on building modular, efficient tooling for **Patient-Level Prediction (PLP)** entirely in **Julia**, using the **OMOP Common Data Model (CDM)**.

In this post, I‚Äôll walk through my project‚Äôs goals, what I‚Äôve built so far, the challenges I encountered, and how Julia‚Äôs ecosystem supports this work. Whether you're a health researcher or a Julia enthusiast, I hope this gives you a glimpse into the exciting possibilities of doing observational health research in Julia.

1. You can find my [**PLP-Pipeline Project Link Here**](https://github.com/kosuri-indu/PLP-Pipeline)

2. If you want to know more about me, you can connect with me on [**LinkedIn**](https://www.linkedin.com/in/kosuri-indu/) and follow me on [**GitHub**](https://github.com/kosuri-indu/)


# Background

## What is Patient-Level Prediction (PLP)?

**Patient-Level Prediction (PLP)** refers to building predictive models that estimate individual patients' risk of developing certain conditions or outcomes. Instead of asking broad population-level questions, PLP asks:

> *‚ÄúGiven this patient‚Äôs medical history, how likely are they to develop diabetes within the next 6 months?‚Äù*

PLP is critical in **clinical decision support**, enabling early interventions and optimized resource allocation. The models are typically trained on rich longitudinal data‚Äîprecisely what OMOP CDM is designed to store.

## Why PLP in Julia?

Traditional PLP pipelines often involve patchworks of R, SQL, and Python - each with its own friction and integration pain points. Julia, with its combination of high performance and a growing health/ML ecosystem, offers a powerful alternative:

- Single-language pipelines from ETL to modeling
- Reproducibility and performance for large datasets
- Composable tooling

This project explores how far we can take Julia as a **first-class language for observational health research**‚Äîespecially when working with the **OMOP CDM** format.


# Project

## Research Question

**Among patients diagnosed with hypertension, who will go on to develop diabetes?**

This question guided all stages of pipeline development - from cohort construction to feature engineering and model training. The goal is to identify at-risk individuals early enough for preventative action.


## What the PLP-Pipeline Project Is About

This project was a practical attempt to walk through an end-to-end Patient-Level Prediction (PLP) pipeline entirely within Julia. Using a large 20GB synthetic dataset containing over one million patients in OMOP CDM format, we set out to:

- **Define the target cohort**: patients diagnosed with hypertension.

- **Define the outcome cohort**: patients from the target group who go on to develop diabetes.

- Extract patient features and medical history directly from the OMOP CDM using SQL queries.

- **Train predictive models** - including L1 Logistic Regression, Random Forest, and XGBoost - using these features to forecast diabetes onset.

- Evaluate the models using standard performance metrics and visualize their results.

The core focus wasn‚Äôt just to produce a final model, but to demonstrate how reproducible, modular pipelines can be built in Julia using domain-specific tools. Along the way, we also aimed to identify and document where current tooling falls short, offering insight into what improvements could make PLP workflows easier and more robust in the JuliaHealth ecosystem.




## Challenges Faced During the Project
While working on this project, I encountered several real-world challenges that are common across Patient-Level Prediction (PLP) pipelines, especially in the context of working with OMOP CDM data:

- **Data Handling at Scale**: Managing and querying over 20GB of synthetic patient data required efficient SQL practices and tight coordination with DuckDB. Even simple queries could become resource-intensive if not optimized properly.

- **Preprocessing Clinical Data**: Extracting usable covariates from raw OMOP CDM tables wasn‚Äôt straightforward - patient histories had to be filtered, merged, and transformed while maintaining temporal correctness.

- **Cohort and Feature Engineering**: Defining meaningful target and outcome cohorts required clinical reasoning, while engineering relevant features demanded clean abstractions and flexible filtering strategies.

- **Interoperability Between Tools**: Connecting SQL-based feature extraction to modeling frameworks like MLJ.jl required custom glue code and care to maintain consistent data formats.

These challenges underscored the need for robust, composable tools in the JuliaHealth ecosystem and helped inform some of the directions I propose for future work.

## How Julia Makes It Easier

Julia's rich package ecosystem made each step of my PLP pipeline smoother and more composable:

- **DrWatson.jl** ‚Äì Managed project structure and reproducibility with minimal friction.

- **DataFrames.jl** ‚Äì Enabled intuitive and performant tabular data manipulation.

- **DuckDB.jl** ‚Äì Queried OMOP CDM data efficiently without needing a separate server.

- **DBInterface.jl** ‚Äì Provided a standardized interface for database interactions.

- **CSV.jl** ‚Äì Handled fast reading/writing of large CSV files for data export and logs.

- **MLJ.jl** ‚Äì Offered a clean and modular machine learning interface for model training and evaluation.

- **OHDSICohortExpressions.jl** ‚Äì Allowed definition of target and outcome cohorts using OHDSI-standard expressions.

These tools came together to form a flexible and reproducible workflow for patient-level prediction in Julia. There were also additional tools and utilities that played important roles throughout the project, further supporting the end-to-end pipeline.

## Conclusion and Future Work

This summer work is just the beginning. There are many future directions that could be taken. I look forward to continuing this journey with the **JuliaHealth** community and contributing further to making health data science more **open**, **reproducible**, and **scalable**.

## Acknowledgements

Thanks to Jacob Zelko for his mentorship, clarity, and constant feedback throughout the project. I also thank the JuliaHealth community for building an ecosystem where composable science can thrive.

[Jacob S. Zelko](https://jacobzelko.com): aka, [TheCedarPrince](https://github.com/TheCedarPrince)

_Note: This blog post was also written with the assistance of LLM technologies to help with grammar, flow, and spelling!_
