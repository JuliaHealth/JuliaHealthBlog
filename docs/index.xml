<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>The JuliaHealth Blog</title>
<link>https://juliahealth.org/JuliaHealthBlog/</link>
<atom:link href="https://juliahealth.org/JuliaHealthBlog/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.6.43</generator>
<lastBuildDate>Fri, 11 Apr 2025 18:30:00 GMT</lastBuildDate>
<item>
  <title>PLP-Pipeline Series Part 1: From Research Question to Cohort Construction</title>
  <dc:creator>Kosuri Lakshmi Indu</dc:creator>
  <link>https://juliahealth.org/JuliaHealthBlog/posts/indu-plp-part1/plp-part1.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction üëã</h1>
<p>Hi everyone! I‚Äôm <strong>Kosuri Lakshmi Indu</strong>, a third-year undergraduate student in Computer Science and an aspiring GSoC 2025 contributor. My interest in using data science for public health led me to the <strong>JuliaHealth</strong> community and, under the mentorship of Jacob S. Zelko, I began working on a project titled <strong>PLP-Pipeline</strong>. This project focuses on building modular, efficient tooling for Patient-Level Prediction (PLP) entirely in Julia, using the OMOP Common Data Model (OMOP CDM).</p>
<p>In this post, I‚Äôll walk through the first part of a three-part blog series documenting my work on building a Patient-Level Prediction (PLP) pipeline in Julia. Each post focuses on a different stage of the pipeline:</p>
<ol type="1">
<li><p><strong>From Research Question to Cohort Construction (this post)</strong></p></li>
<li><p>From Raw Clinical Data to Predictive Models</p></li>
<li><p>Lessons Learned, Key Challenges, and What Comes Next</p></li>
</ol>
<p>In Part 1, we‚Äôll start at the very beginning-formulating the research question, exploring the OMOP CDM, setting up the local database, and defining target and outcome cohorts using Julia tools. Whether you‚Äôre a health researcher, a GSoC aspirant, or a Julia enthusiast, I hope this gives you a clear and accessible introduction to how observational health research can be made more composable, reproducible, and efficient using Julia.</p>
<p>You can find my <a href="https://github.com/kosuri-indu/PLP-Pipeline"><strong>PLP-Pipeline Project Link Here</strong></a></p>
<p><a href="https://www.linkedin.com/in/kosuri-indu/"><strong>LinkedIn</strong></a> | <a href="https://github.com/kosuri-indu/"><strong>GitHub</strong></a></p>
</section>
<section id="background" class="level1">
<h1>Background</h1>
<section id="what-is-observational-health" class="level2">
<h2 class="anchored" data-anchor-id="what-is-observational-health">What is Observational Health?</h2>
<p>Observational health research examines real-world patient data such as electronic health records (EHRs), claims, and registries to understand health and disease outside of controlled trial environments. This type of research plays a vital role in informing decisions by clinicians, policymakers, and researchers, especially when addressing population-level health questions and disparities.</p>
<p>A core aspect of observational health is the use of phenotype definitions, which describe a specific set of observable patient characteristics (e.g., diagnosis codes, symptoms, demographics, biomarkers) that define a population of interest. Creating accurate and reproducible phenotype definitions is essential for ensuring research validity. However, challenges such as missing data, demographic biases, and inconsistently recorded information can significantly impact the reliability of these definitions.</p>
<p>To support reproducible research at scale, communities like OHDSI (Observational Health Data Sciences and Informatics) have developed standards such as the OMOP Common Data Model (CDM) and workflows for developing computable phenotype definitions.</p>
<p>In our work, we utilize observational health data already structured through the OMOP Common Data Model (CDM). We construct patient cohorts based on existing phenotype definitions. These cohorts then serve as the basis for building patient-level prediction models, enabling us to explore and generate insights that can support data-driven clinical decision-making.</p>
</section>
<section id="what-is-the-omop-cdm" class="level2">
<h2 class="anchored" data-anchor-id="what-is-the-omop-cdm">What Is the OMOP CDM?</h2>
<p>The <strong>Observational Medical Outcomes Partnership Common Data Model (OMOP CDM)</strong> is a standardized framework for organizing and analyzing observational healthcare data. The OMOP CDM converts diverse sources of health data into a common format that supports large-scale, systematic analysis.</p>
<p>The OMOP CDM organizes data into a consistent set of relational tables like <code>condition_occurrence</code>, <code>drug_exposure</code>, <code>person</code>, <code>visit_occurrence</code> etc, using standardized vocabularies. These tables are interconnected, allowing for relational analysis across a patient‚Äôs medical history.</p>
<p>By transforming diverse healthcare datasets into a common format, the OMOP CDM enables reproducibility, interoperability, and large-scale studies across institutions and populations.</p>
<br>
<center>
<p><img src="https://juliahealth.org/JuliaHealthBlog/posts/indu-plp-part1/omopcdm.png" class="img-fluid"></p>
OMOP Common Data Model
</center>
</section>
<section id="what-is-patient-level-prediction-plp" class="level2">
<h2 class="anchored" data-anchor-id="what-is-patient-level-prediction-plp">What is Patient-Level Prediction (PLP)?</h2>
<p><strong>Patient-Level Prediction (PLP)</strong> is a data-driven approach that uses machine learning or statistical models to estimate the risk of specific clinical outcomes for individual patients, based on their historical healthcare data.</p>
<p>The key goal of PLP is to answer personalized clinical questions like:</p>
<blockquote class="blockquote">
<p><em>‚ÄúFor patients who present with chest pain leading to a hospital visit, can we predict which of these patients will go on to experience a heart attack after their hospital visit?‚Äù</em></p>
</blockquote>
<p>PLP focuses on using observational patient data such as diagnoses, medications, procedures, and demographics - to predict individual-level risks of future health events. While it may sound similar to precision medicine, there‚Äôs a key distinction: precision medicine aims to tailor treatment plans based on a patient‚Äôs genetics, environment, and lifestyle, whereas PLP is specifically about forecasting outcomes for individual patients using data-driven models. These predictions can support timely and personalized clinical decisions.</p>
</section>
<section id="why-plp-in-julia" class="level2">
<h2 class="anchored" data-anchor-id="why-plp-in-julia">Why PLP in Julia?</h2>
<p>While established PLP workflows are well-supported in R through OHDSI‚Äôs suite of packages, our work explores an alternative approach using Julia - a high-performance language that enables building efficient and reproducible pipelines from end to end.</p>
<p>Julia offers several advantages that make it well-suited for observational health research:</p>
<ul>
<li><p><strong>Composability</strong>: Julia‚Äôs modular design supports reusable components, making PLP pipelines easier to maintain and extend.</p></li>
<li><p><strong>Speed</strong>: With performance comparable to C, Julia efficiently handles large, complex healthcare datasets.</p></li>
<li><p><strong>Unified Ecosystem</strong>: Tools like <code>OHDSICohortExpressions.jl</code>, <code>DataFrames.jl</code>, <code>MLJ.jl</code> etc. integrate seamlessly, enabling cohort definition, data transformation, and modeling within one consistent environment.</p></li>
</ul>
<p>Additionally, Julia features a rich and growing ecosystem with many tools for scientific computing and data science, making it a strong alternative for modern health informatics workflows.</p>
<br>
<center>
<p><img src="https://juliahealth.org/JuliaHealthBlog/posts/indu-plp-part1/julia.webp" class="img-fluid"></p>
Julia Equivalents
</center>
</section>
</section>
<section id="reference-foundation-from-the-ohdsi-plp-framework" class="level1">
<h1>Reference: Foundation from the OHDSI PLP Framework</h1>
<p>Throughout the development of this PLP pipeline, I referenced the methodology presented in the following paper:</p>
<blockquote class="blockquote">
<p>Reps, J. M., Schuemie, M. J., Suchard, M. A., Ryan, P. B., Rijnbeek, P. R., &amp; Madigan, D. (2018). Design and implementation of a standardized framework to generate and evaluate patient-level prediction models using observational healthcare data. <em>Journal of the American Medical Informatics Association, 25(8), 969‚Äì975</em>. <a href="https://doi.org/10.1093/jamia/ocy032">https://doi.org/10.1093/jamia/ocy032</a></p>
</blockquote>
<p>This paper laid the groundwork for my implementation and inspired several core components of the project ‚Äî from data curation to model evaluation.</p>
<section id="methodologies-from-the-paper" class="level2">
<h2 class="anchored" data-anchor-id="methodologies-from-the-paper">Methodologies from the Paper</h2>
<ol type="1">
<li><p>Standardized Framework for PLP - Outlines a consistent process for building patient-level prediction models across datasets and settings.</p></li>
<li><p>Defining the Prediction Problem - Emphasizes clear definition of target, outcome, and time-at-risk for valid predictions.</p></li>
<li><p>Cohort Definition and Data Extraction - Uses standardized OMOP CDM cohorts to ensure reproducibility and consistent data extraction.</p></li>
<li><p>Feature Construction - Derives meaningful predictors from observational data like conditions and demographics.</p></li>
<li><p>Model Training and Evaluation - Trains ML models and evaluates them using metrics like AUC and cross-validation.</p></li>
</ol>
<p>We are adapting this framework for our PLP pipeline to ensure a consistent approach.</p>
</section>
</section>
<section id="research-question" class="level1">
<h1>Research Question</h1>
<p>As an example, here is one question we could potentially explore within this PLP pipeline:</p>
<blockquote class="blockquote">
<p><strong>Among patients diagnosed with hypertension, who will go on to develop diabetes?</strong></p>
</blockquote>
<p>The focus is on identifying patients with hypertension who may progress to diabetes based on their medical history and risk factors.</p>
<section id="cohort-construction" class="level2">
<h2 class="anchored" data-anchor-id="cohort-construction">Cohort Construction</h2>
<p>Cohorts are groups of patients defined by specific criteria that are relevant to the research question. For this task, two main cohorts need to be defined:</p>
<ul>
<li><p><strong>Target Cohort</strong>: This refers to the group of patients we want to make predictions for. In our case, it includes patients who have been diagnosed with hypertension. These patients serve as the starting point for our prediction timeline.</p></li>
<li><p><strong>Outcome Cohort</strong>: This refers to the clinical event we aim to predict. In our case, it includes patients from the target cohort who are subsequently diagnosed with diabetes within a specified time window. This event marks the outcome that our model will learn to forecast.</p></li>
</ul>
<p>These cohort definitions are central to structuring the data pipeline, as they form the foundation for downstream tasks like feature extraction, model training, and evaluation.</p>
</section>
</section>
<section id="defining-cohorts-using-ohdsicohortexpressions.jl" class="level1">
<h1>Defining Cohorts using OHDSICohortExpressions.jl</h1>
<p>In the context of this research, I received a 20GB synthetic dataset that contains 1,115,000 fake patients (1,000,000 alive and 115,000 deceased), each with 3 years of medical history. This dataset was provided as a DuckDB database, a lightweight, high-performance analytical database that allows fast querying of large datasets directly from local files without the need for a server. For more details on how to use DuckDB with Julia, refer to the <a href="https://duckdb.org/docs/stable/clients/julia.html">DuckDB Julia Client Documentation</a>.</p>
<p>For cohort creation, I used OHDSI cohort definitions provided directly by my mentor in the form of two JSON files:</p>
<ul>
<li><strong>Target cohort</strong>: <code>Hypertension.json</code></li>
<li><strong>Outcome cohort</strong>: <code>Diabetes.json</code></li>
</ul>
<p>To execute them, I used the <a href="https://github.com/JuliaHealth/OHDSICohortExpressions.jl">OHDSICohortExpressions</a> to convert the JSON definiti.jlons into SQL queries, which were then run against the DuckDB database to extract the relevant cohorts.</p>
<p>Here‚Äôs the breakdown of the process:</p>
<ol type="1">
<li><p>Reading the cohort definitions from JSON files.</p></li>
<li><p>Connecting to the DuckDB database, which stores the synthetic patient data.</p></li>
<li><p>Translating the cohort definitions into SQL using OHDSICohortExpressions.jl.</p></li>
<li><p>Executing the SQL queries to create the target and outcome cohorts in the database.</p></li>
</ol>
<section id="cohort-definition-code" class="level3">
<h3 class="anchored" data-anchor-id="cohort-definition-code">Cohort Definition Code</h3>
<p>Here‚Äôs how we set up the DuckDB connection and define cohorts using OHDSI JSON definitions: We also use DrWatson.jl to manage project-relative paths (via datadir(‚Ä¶)) to ensure reproducibility and portability of file access.</p>
<p><strong>File:</strong> <code>cohort_definition.jl</code></p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">DBInterface</span>: connect, execute</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">FunSQL</span>: reflect, render</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">OHDSICohortExpressions</span>: translate</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">using</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">DuckDB</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">DataFrames</span></span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Read the cohort definitions from JSON files (Hypertension and Diabetes definitions)</span></span>
<span id="cb1-7">target_json <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">datadir</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"exp_raw"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"definitions"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hypertension.json"</span>), <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">String</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Target cohort (Hypertension)</span></span>
<span id="cb1-8">outcome_json <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">datadir</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"exp_raw"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"definitions"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Diabetes.json"</span>), <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">String</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Outcome cohort (Diabetes)</span></span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Establish a connection to the DuckDB database</span></span>
<span id="cb1-11">connection <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">connect</span>(DuckDB.DB, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">datadir</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"exp_raw"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"synthea_1M_3YR.duckdb"</span>))</span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Function to process a cohort definition (translate the JSON to SQL and execute)</span></span>
<span id="cb1-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">process_cohort</span>(def_json, def_id, conn)</span>
<span id="cb1-15">  catalog <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reflect</span>(conn; schema<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dbt_synthea_dev"</span>, dialect<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=:</span>duckdb)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reflect the database schema</span></span>
<span id="cb1-16">  fun_sql <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">translate</span>(def_json; cohort_definition_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>def_id)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Translate the JSON to SQL query</span></span>
<span id="cb1-17">  sql <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">render</span>(catalog, fun_sql)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Render the SQL query</span></span>
<span id="cb1-18"></span>
<span id="cb1-19">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ensure the cohort table exists before inserting</span></span>
<span id="cb1-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">execute</span>(conn, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb1-21"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  CREATE TABLE IF NOT EXISTS dbt_synthea_dev.cohort (</span></span>
<span id="cb1-22"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    cohort_definition_id INTEGER,</span></span>
<span id="cb1-23"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    subject_id INTEGER,</span></span>
<span id="cb1-24"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    cohort_start_date DATE,</span></span>
<span id="cb1-25"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    cohort_end_date DATE</span></span>
<span id="cb1-26"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  );</span></span>
<span id="cb1-27"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  """</span>)</span>
<span id="cb1-28"></span>
<span id="cb1-29">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Execute the SQL query to insert cohort data into the database</span></span>
<span id="cb1-30">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">execute</span>(conn, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb1-31"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  INSERT INTO dbt_synthea_dev.cohort</span></span>
<span id="cb1-32"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  SELECT * FROM (</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>sql<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">) AS foo;</span></span>
<span id="cb1-33"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  """</span>)</span>
<span id="cb1-34"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span>
<span id="cb1-35"></span>
<span id="cb1-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Process the target and outcome cohorts</span></span>
<span id="cb1-37"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">process_cohort</span>(target_json, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, connection)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the target cohort (Hypertension)</span></span>
<span id="cb1-38"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">process_cohort</span>(outcome_json, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, connection)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the outcome cohort (Diabetes)</span></span>
<span id="cb1-39"></span>
<span id="cb1-40"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">close!</span>(connection)</span></code></pre></div>
<p>This code uses FunSQL.jl and OHDSICohortExpressions.jl to translate and render OHDSI ATLAS cohort definitions into executable SQL for DuckDB. The <code>translate</code> function from OHDSICohortExpressions.jl converts the JSON cohort definitions (Hypertension and Diabetes) into a FunSQL query representation. Then, <code>reflect</code> is used to introspect the DuckDB schema, and <code>render</code> from FunSQL.jl turns the abstract query into valid DuckDB SQL. The <code>process_cohort</code> function executes this SQL using <code>execute</code> to insert the resulting cohort data into the cohort table. This pipeline allows OHDSI cohort logic to be ported directly into a Julia workflow without relying on external OHDSI R tools.</p>
</section>
</section>
<section id="wrapping-up" class="level1">
<h1>Wrapping Up</h1>
<p>This post covered the foundations of the PLP pipeline:</p>
<ul>
<li><p>Explored observational health research, OMOP CDM, PLP, and Julia for large-scale clinical data analysis.</p></li>
<li><p>Formulated the research question: predicting diabetes progression in hypertension patients.</p></li>
<li><p>Explained OMOP CDM‚Äôs role in standardizing clinical data.</p></li>
<li><p>Defined target and outcome cohorts for the study.</p></li>
<li><p>Used Julia to convert cohort definitions into executable SQL for DuckDB querying.</p></li>
</ul>
<p>In the next post, I‚Äôll walk through how we go from raw clinical data to predictive modeling, with Julia code examples that highlight feature extraction, data processing, and model training-bringing the full PLP pipeline to life.</p>
<section id="acknowledgements" class="level2">
<h2 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h2>
<p>Thanks to Jacob Zelko for his mentorship, clarity, and constant feedback throughout the project. I also thank the JuliaHealth community for building an ecosystem where composable science can thrive.</p>
<p><a href="https://jacobzelko.com">Jacob S. Zelko</a>: aka, <a href="https://github.com/TheCedarPrince">TheCedarPrince</a></p>
<p><em>Note: This blog post was drafted with the assistance of LLM technologies to support grammar, clarity and structure.</em></p>


<!-- -->

</section>
</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a><div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{lakshmi_indu2025,
  author = {Lakshmi Indu, Kosuri},
  title = {PLP-Pipeline {Series} {Part} 1: {From} {Research} {Question}
    to {Cohort} {Construction}},
  date = {2025-04-12},
  url = {https://juliahealth.org/JuliaHealthBlog/posts/indu-plp-part1/plp-part1.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-lakshmi_indu2025" class="csl-entry quarto-appendix-citeas">
<div class="">K.
Lakshmi Indu, <span>‚ÄúPLP-Pipeline Series Part 1: From Research Question
to Cohort Construction,‚Äù</span> Apr. 12, 2025. Available: <a href="https://juliahealth.org/JuliaHealthBlog/posts/indu-plp-part1/plp-part1.html">https://juliahealth.org/JuliaHealthBlog/posts/indu-plp-part1/plp-part1.html</a></div>
</div></div></section></div> ]]></description>
  <category>patient level prediction</category>
  <category>omop cdm</category>
  <category>observational health</category>
  <guid>https://juliahealth.org/JuliaHealthBlog/posts/indu-plp-part1/plp-part1.html</guid>
  <pubDate>Fri, 11 Apr 2025 18:30:00 GMT</pubDate>
</item>
<item>
  <title>GSoC ‚Äô24: Adding dataset-wide functions and integrations of augmentations</title>
  <dc:creator>Jan Zubik</dc:creator>
  <link>https://juliahealth.org/JuliaHealthBlog/posts/JZubik-gsoc/GSoC_Jan_Zubik_MedPipe3D.html</link>
  <description><![CDATA[ 




<section id="section" class="level1">
<h1>üìùü©ªüìéüìâ ‚û°Ô∏è üóÉÔ∏èüìö‚ôªÔ∏èüßë‚Äçüè´ ‚û°Ô∏è ü§ñüëÅÔ∏èüìà ‚û°Ô∏è ‚ù§Ô∏è‚Äçü©π</h1>
<p><em>These emoticons may resemble <strong>hieroglyphics</strong>, but very soon you will realize that they <strong>mean more than 1000s</strong> of lines of code.</em></p>
<details>
<summary>
Description of the emojis used in the title
</summary>
<ul>
<li>
üìù <strong>Action Plan</strong>: A clear, structured plan that guides each step of the MedPipe3D pipeline.
</li>
<li>
ü©ª <strong>3D Medical Images</strong>: Medical imaging data, such as MRI scans in Nifti format.
</li>
<li>
üìé <strong>AI Model</strong>: The initial AI model that will be trained and refined within the pipeline.
</li>
<li>
üìâ <strong>Loss Function</strong>: A function that measures the model‚Äôs performance during training, guiding the optimization process.
</li>
<li>
üóÉÔ∏è <strong>Data Loading</strong>: Preparation and loading of data and metadata into HDF5 format.
</li>
<li>
üìö <strong>Data Splitting</strong>: Dividing data into training, validation, and test sets.
</li>
<li>
‚ôªÔ∏è <strong>Data Augmentation</strong>: Increasing data variability through augmentation.
</li>
<li>
üßë‚Äçüè´ <strong>AI Training</strong>: Using Lux.jl framework to train the AI model.
</li>
<li>
ü§ñ <strong>Model</strong>: The trained AI model that can perform tasks like segmentation on medical images.
</li>
<li>
üëÅÔ∏è <strong>Data for Visualization</strong>: Output data, such as masks and segmentations.
</li>
<li>
üìà <strong>Performance Logs</strong>: Logs and metrics documenting the AI‚Äôs performance.
</li>
<li>
‚ù§Ô∏è‚Äçü©π <strong>Purpose of MedPipe3D</strong>
</li>
</ul>
</details>
<hr>
<p>In this post, I‚Äôd like to summarize what I did this summer and everything I learned along the way, rebuilding the MedPipe3D medical imaging pipeline. I will not start typically, but so that anyone even a novice can visualize what this project has achieved, while the latter part is intended for more experienced readers. It will be easiest to divide it into 4 steps separated by ‚û°Ô∏è in the title above. Each emoji stands for a different piece of pipeliner and will be described below.</p>
<p>üìùü©ªüìéüìâ <strong>What we need from the user</strong></p>
<p>MedPipe3D requires four essential inputs from the user to get started: a clear action plan üìù, 3D medical images like MRI scans ü©ª, an AI model üìé, and a loss function üìâ.</p>
<p>üóÉÔ∏èüìö‚ôªÔ∏èüßë‚Äçüè´ <strong>The Pipeline essential AI manufacturing line</strong></p>
<p>Following the plan üìù, MedPipe3D loads data, pre-processes, and organizes it üóÉÔ∏è. Allowing data to be easily split üìö, and efficiently augmented ‚ôªÔ∏è in many ways for learning AI üßë‚Äçüè´ model effectively. In the end, performing testing and post-processing for better determination of AI skills.<br>
It‚Äôs designed to transform raw medical data into a format that your AI can learn from, segmenting meaningful patterns and structures.</p>
<p>ü§ñüëÅÔ∏èüìà <strong>Results and Insights</strong></p>
<p>MedPipe3D is a tool for researchers and for that, it cannot do without analysis, testing, and evaluation. The result of the pipeline is a model ü§ñ as well as data üëÅÔ∏è and logs üìà needed in MedEval3D that are ready for visualization and further analysis with MedEye3D. In a nutshell, it makes visualizing results easy, tumor locations or other medical features directly as masks on the scans.</p>
<p>‚ù§Ô∏è‚Äçü©π <strong>Purpose-Driven Technology</strong></p>
<p>MedPipe3D‚Äôs mission goes beyond technology. It‚Äôs about providing the tools to create AIs that support healthcare professionals in making faster, more accurate decisions, with the ultimate goal of saving lives.</p>
<p>This four-part journey captures the heart of the MedPipe3D toolkit for advancing medical AI, from raw data to life-saving insight.</p>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p><strong>MedPipe3D</strong> is a framework created from hundreds of hours over summer vacation, thousands of lines of code, hundreds of mistakes, and most importantly the guidance of my mentor and author of all of these libraries Dr.&nbsp;<a href="https://www.linkedin.com/in/jakub-mitura-7b2013151/">Jakub Mitura</a>. At its core, MedPipe3D combines sophisticated data handling from <strong>MedImage</strong> thanks to the hard work of <a href="https://www.linkedin.com/in/divyansh-goyal-34654b200/">Divyansh Goyal</a>. Newly developed pipeline for model training, validation, and testing with existing <strong>MedEval3D</strong>, and result visualization with <strong>MedEye3D</strong>. Unfortunately, not all of the project‚Äôs goals have been fully achieved, and thereby there is one section ‚û°Ô∏è too many. Hopefully not for long. My name is <a href="https://www.linkedin.com/in/janzubik/">Jan Zubik</a>, and I wrote this entire library from scratch, which is currently my most complex project.</p>
<p>If you are a data scientist, programmer, or code enthusiast, I invite you to read the next section where I go into detail and present <strong>version 1</strong> of this tool in detail.</p>
<p>I‚Äôm a 3rd-year student of BSc in Data Science and Machine Learning, I know that many things can be done better, expanded, debugged, and optimized. Now it just works, <strong>but don‚Äôt hesitate to write to me personally</strong> on <a href="https://www.linkedin.com/in/janzubik/">LinkedIn</a>, <a href="https://julialang.slack.com/team/U06L685B6TD">Julia‚Äôs Slack</a> or <a href="https://github.com/JanZubik">GitHub</a>! With your comments, and direct critique <strong>you will help me</strong> to be a better programmer and one day MedPipe3D will contribute in a tiny way to save someone‚Äôs life!</p>
<p>Exact work from the Google Summer of Code project you will find in <a href="https://github.com/JuliaHealth/MedPipe3D.jl/tree/GSoC-'24-MedPipe3D">GitHub the repository.</a></p>
</section>
</section>
<section id="project-goals" class="level1">
<h1>Project Goals</h1>
<p>The primary goal was to develop MedPipe3D and enhance MedImage, a Julia package designed to streamline the process of GPU-accelerated medical image segmentation. The project aimed to merge existing libraries‚ÄîMedEye3D, MedEval3D, and MedImage‚Äîinto a cohesive pipeline that facilitates advanced data handling, preprocessing, augmentation, model training, validation, testing with post-processing and visualization for medical imaging applications.</p>
</section>
<section id="tasks" class="level1">
<h1>Tasks</h1>
<ul>
<li>üÜô - Fully finished, with great potential for further development</li>
<li>‚úÖ - Fully completed</li>
<li>‚ö†Ô∏è - Partially uncompleted</li>
<li>‚ùå - Unreached</li>
</ul>
Full list of all major parts and minor tasks (all tasks set up in the original GSOC plan were completed at least minimum level, and many additional improvements above minimum were implemented)
<details>
<ol type="1">
<li><strong>Helpful functions to support the MedImage format ‚úÖ</strong></li>
</ol>
<ul>
<li>Debugging rotations ‚úÖ</li>
<li>Crop MedImage or 3D array ‚úÖ</li>
<li>Pad MedImage or 3D array ‚úÖ</li>
<li>Pad with edge values ‚úÖ</li>
<li>Calculating the average of the edges of the picture üÜô</li>
</ul>
<ol start="2" type="1">
<li><strong>Integrate Augmentations for Medical Data ‚úÖ</strong></li>
</ol>
<ul>
<li>Brightness transform ‚úÖ</li>
<li>Contrast augmentation transform ‚úÖ</li>
<li>Gamma Transform ‚úÖ</li>
<li>Gaussian noise transform ‚úÖ</li>
<li>Rician noise transform ‚úÖ</li>
<li>Mirror transform ‚úÖ</li>
<li>Scale transform üÜô</li>
<li>Gaussian blur transform ‚úÖ</li>
<li>Simulate low-resolution transform üÜô</li>
<li>Elastic deformation transform üÜô</li>
</ul>
<ol start="3" type="1">
<li><strong>Develop a Pipeline ‚ö†Ô∏è</strong></li>
</ol>
<ul>
<li>Structured configuration of all hyperparameters üÜô</li>
<li>Interactive creation of configuration ‚úÖ</li>
<li>Creating a structured configuration of hyperparameters in JSON üÜô</li>
<li>Loading data into HDF5 ‚úÖ
<ul>
<li>Cropping and padding to real coordinates of the main picture ‚úÖ</li>
<li>Calculate Median and Mean Spacing with resampling üÜô</li>
<li>Cropping and padding to specific or average dimensions ‚úÖ</li>
<li>Standardization and normalization ‚úÖ</li>
</ul></li>
<li>Managing index groups (channels) for batch requirements in HDF5 ‚úÖ
<ul>
<li>Divide into train, validation, test specified as % ‚úÖ</li>
<li>Divide with a specific division specified in JSON ‚úÖ</li>
<li>Equal distribution when there are multiple classes ‚úÖ</li>
</ul></li>
<li>Extracting data and creating 5-dimensional tensors for batched learning ‚úÖ
<ul>
<li>Hole images data loading ‚úÖ</li>
<li>Patch-based data loading with probabilistic oversampling ‚úÖ</li>
</ul></li>
<li>Obtaining the necessary elements for learning ‚úÖ
<ul>
<li>Get optimizer, loss function, and performance metrics ‚úÖ</li>
</ul></li>
<li>Apply augmentations ‚úÖ</li>
<li>Train ‚úÖ
<ul>
<li>Initializing model ‚úÖ</li>
<li>The learning epoch ‚úÖ</li>
<li>Epoch with early stopping functionality ‚úÖ</li>
</ul></li>
<li>Inferring ‚úÖ</li>
<li>Validation ‚úÖ
<ul>
<li>Evaluate metric ‚úÖ</li>
<li>Evaluate validation loss ‚úÖ</li>
<li>Validation with largest connected component‚úÖ</li>
</ul></li>
<li>Testing ‚úÖ
<ul>
<li>Evaluate test set ‚úÖ</li>
<li>Invertible augmentations evaluation ‚úÖ</li>
<li>Patch-based invertible augmentations evaluation ‚úÖ</li>
</ul></li>
<li>Logging ‚ö†Ô∏è
<ul>
<li>Returning the necessary results ‚ö†Ô∏è</li>
<li>Logging connection to TensorBoard ‚ùå</li>
<li>Logging errors and warnings ‚ùå</li>
</ul></li>
<li>Visualization ‚ö†Ô∏è
<ul>
<li>Returning data in Nifti format ‚úÖ</li>
<li>Automated visualization in MedEye3D ‚ùå</li>
</ul></li>
</ul>
<ol start="4" type="1">
<li><strong>Optimize Performance with GPU Acceleration</strong>
<ul>
<li>Augmentations ‚úÖ</li>
<li>Learning, Validation, Testing ‚úÖ</li>
<li>Largest connected component ‚úÖ</li>
</ul></li>
<li><strong>Documentation ‚ö†Ô∏è</strong>
<ul>
<li>Comments in important places in the code ‚ö†Ô∏è</li>
<li>Documentation of the function ‚ö†Ô∏è</li>
<li>Read me ‚ö†Ô∏è</li>
<li>Documentation on juliahealth.org ‚ùå</li>
</ul></li>
</ol>
</details>
<section id="integrate-augmentations-for-medical-data" class="level2">
<h2 class="anchored" data-anchor-id="integrate-augmentations-for-medical-data">Integrate augmentations for medical data üÜô</h2>
<p>Augmenting medical data is a crucial step for enhancing model robustness, especially given the variations in imaging conditions and patient anatomy.</p>
<ul>
<li>This pipeline currently supports multiple augmentation techniques:
<ul>
<li>Brightness transform ‚úÖ</li>
<li>Contrast augmentation transform ‚úÖ</li>
<li>Gamma Transform ‚úÖ</li>
<li>Gaussian noise transform ‚úÖ</li>
<li>Rician noise transform ‚úÖ</li>
<li>Mirror transform ‚úÖ</li>
<li>Scale transform üÜô</li>
<li>Gaussian blur transform ‚úÖ</li>
<li>Simulate low-resolution transform üÜô</li>
<li>Elastic deformation transform üÜô</li>
</ul></li>
</ul>
<p>Which have been fully integrated. Each of these methods helps the model generalize better by simulating diverse imaging scenarios.</p>
<p><img src="https://juliahealth.org/JuliaHealthBlog/posts/JZubik-gsoc/Augmentations.png" class="img-fluid"></p>
<p>Comments:</p>
<p>Augmentations such as scaling, and low-resolution simulation use interpolation that is not yet GPU-accelerated.</p>
<p>Elastic deformation with simulation of different tissue elasticities is a potential development opportunity that would further improve the model‚Äôs adaptability by mimicking more complex variations found in medical imaging.</p>
</section>
<section id="invertible-augmentations-and-support-test-time-augmentations" class="level2">
<h2 class="anchored" data-anchor-id="invertible-augmentations-and-support-test-time-augmentations">Invertible augmentations and support test time augmentations üÜô</h2>
<p>This section focuses on the ability to apply reversible augmentations to test data, allowing the model to be evaluated with different transformations. Only rotation is available at this time. The function <code>evaluate_patches</code> performs this evaluation by applying specified augmentations, dividing the test data into patches, and reconstructing the full image from the patches. During testing, one can choose to use of largest connected component post-processing. Metrics are calculated and results are saved for analysis.</p>
<details>
<summary>
evaluate_test:
</summary>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span>
<span id="cb1-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> test_group <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> test_groups</span>
<span id="cb1-3">    test_data, test_label, attributes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fetch_and_preprocess_data</span>([test_group], h5, config)</span>
<span id="cb1-4">    results, test_metrics <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">evaluate_patches</span>(test_data, test_label,  tstate, model, config)</span>
<span id="cb1-5">    y_pred, metr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">process_results</span>(results, test_metrics, config)</span>
<span id="cb1-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">save_results</span>(y_pred, attributes, config)</span>
<span id="cb1-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">push!</span>(all_test_metrics, metr)</span>
<span id="cb1-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span></code></pre></div>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">evaluate_patches</span>(test_data, test_label, tstate, model, config, axis, angle)</span>
<span id="cb2-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">println</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Evaluating patches..."</span>)</span>
<span id="cb2-3">    results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-4">    test_metrics <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-5">    tstates <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [tstate]</span>
<span id="cb2-6">    test_time_augs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-7"></span>
<span id="cb2-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> config[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"learning"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n_invertible"</span>]</span>
<span id="cb2-9">        data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rotate_mi</span>(test_data, axis, angle)</span>
<span id="cb2-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> tstate_curr <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tstates</span>
<span id="cb2-11">            patch_results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-12">            patch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tuple</span>(config[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"learning"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"patch_size"</span>])</span>
<span id="cb2-13">            idx_and_patches, paded_data_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">divide_into_patches</span>(test_data, patch_size)</span>
<span id="cb2-14">            coordinates <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [patch[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] for patch <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> idx_and_patches]</span>
<span id="cb2-15">            patch_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [patch[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] for patch <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> idx_and_patches]</span>
<span id="cb2-16">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> patch <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> patch_data</span>
<span id="cb2-17">                y_pred_patch, _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">infer_model</span>(tstate_curr, model, patch)</span>
<span id="cb2-18">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">push!</span>(patch_results, y_pred_patch)</span>
<span id="cb2-19">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span>
<span id="cb2-20">            idx_and_y_pred_patch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">zip</span>(coordinates, patch_results)</span>
<span id="cb2-21">            y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">recreate_image_from_patches</span>(idx_and_y_pred_patch, paded_data_size, patch_size, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">size</span>(test_data))</span>
<span id="cb2-22">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> config[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"learning"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"largest_connected_component"</span>]</span>
<span id="cb2-23">                y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">largest_connected_component</span>(y_pred, config[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"learning"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n_lcc"</span>])</span>
<span id="cb2-24">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span>
<span id="cb2-25">            metr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">evaluate_metric</span>(y_pred, test_label, config[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"learning"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"metric"</span>])</span>
<span id="cb2-26">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">push!</span>(test_metrics, metr)</span>
<span id="cb2-27">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span>
<span id="cb2-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span>
<span id="cb2-29">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> results, test_metrics</span>
<span id="cb2-30"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span></code></pre></div>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">divide_into_patches</span>(image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">AbstractArray{T, 5}</span>, patch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Tuple{Int, Int, Int}</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">where</span> T</span>
<span id="cb3-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">println</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dividing image into patches..."</span>)</span>
<span id="cb3-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">println</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Size of the image: "</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">size</span>(image)) </span>
<span id="cb3-4"></span>
<span id="cb3-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the required padding for each dimension (W, H, D)</span></span>
<span id="cb3-6">    pad_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb3-7">        (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">size</span>(image, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> patch_size[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> ? patch_size[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">size</span>(image, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> patch_size[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb3-8">        (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">size</span>(image, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> patch_size[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> ? patch_size[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">size</span>(image, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> patch_size[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb3-9">        (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">size</span>(image, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> patch_size[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> ? patch_size[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">size</span>(image, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> patch_size[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb3-10">    )</span>
<span id="cb3-11"></span>
<span id="cb3-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pad the image if necessary</span></span>
<span id="cb3-13">    padded_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image</span>
<span id="cb3-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">any</span>(pad_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb3-15">        padded_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">crop_or_pad</span>(image, (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">size</span>(image, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pad_size[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">size</span>(image, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pad_size[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">size</span>(image, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pad_size[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]))</span>
<span id="cb3-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span>
<span id="cb3-17"></span>
<span id="cb3-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract patches</span></span>
<span id="cb3-19">    patches <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb3-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>patch_size[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">size</span>(padded_image, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-21">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>patch_size[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">size</span>(padded_image, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb3-22">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> z <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>patch_size[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">size</span>(padded_image, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb3-23">                patch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">view</span>(</span>
<span id="cb3-24">                    padded_image,</span>
<span id="cb3-25">                    x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>patch_size[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">size</span>(padded_image, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)),</span>
<span id="cb3-26">                    y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>patch_size[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">size</span>(padded_image, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)),</span>
<span id="cb3-27">                    z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>patch_size[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">size</span>(padded_image, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)),</span>
<span id="cb3-28">                    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>,</span>
<span id="cb3-29">                    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb3-30">                )</span>
<span id="cb3-31">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">push!</span>(patches, [(x, y, z), patch])</span>
<span id="cb3-32">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span>
<span id="cb3-33">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span>
<span id="cb3-34">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span>
<span id="cb3-35">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">println</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Size of padded image: "</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">size</span>(padded_image))</span>
<span id="cb3-36">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> patches, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">size</span>(padded_image)</span>
<span id="cb3-37"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span>
<span id="cb3-38"></span>
<span id="cb3-39"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">recreate_image_from_patches</span>(</span>
<span id="cb3-40">    coords_with_patches,</span>
<span id="cb3-41">    padded_size,</span>
<span id="cb3-42">    patch_size,</span>
<span id="cb3-43">    original_size</span>
<span id="cb3-44">)</span>
<span id="cb3-45">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">println</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Recreating image from patches..."</span>)</span>
<span id="cb3-46">    reconstructed_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">zeros</span>(<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Float32</span>, padded_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span>)</span>
<span id="cb3-47">    </span>
<span id="cb3-48">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Place patches back into their original positions</span></span>
<span id="cb3-49">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (coords, patch) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> coords_with_patches</span>
<span id="cb3-50">        x, y, z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> coords</span>
<span id="cb3-51">        reconstructed_image[</span>
<span id="cb3-52">            x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>patch_size[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb3-53">            y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>patch_size[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb3-54">            z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>patch_size[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb3-55">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>,</span>
<span id="cb3-56">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb3-57">        ] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> patch</span>
<span id="cb3-58">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span>
<span id="cb3-59"></span>
<span id="cb3-60">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Crop the reconstructed image to remove any padding</span></span>
<span id="cb3-61">    final_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> reconstructed_image[</span>
<span id="cb3-62">        <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>original_size[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],</span>
<span id="cb3-63">        <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>original_size[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>],</span>
<span id="cb3-64">        <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>original_size[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>],</span>
<span id="cb3-65">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>,</span>
<span id="cb3-66">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb3-67">    ]</span>
<span id="cb3-68">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">println</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Size of the final image: "</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">size</span>(final_image))</span>
<span id="cb3-69">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> final_image</span>
<span id="cb3-70"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span></code></pre></div>
</details>
<p>Comment:<br> In this section, there is significant potential to incorporate additional types of invertible augmentations.</p>
</section>
<section id="patch-based-data-loading-with-probabilistic-oversampling" class="level2">
<h2 class="anchored" data-anchor-id="patch-based-data-loading-with-probabilistic-oversampling">Patch-based data loading with probabilistic oversampling ‚úÖ</h2>
<p>In this section, patches are extracted using <code>extract_patch</code> from the medical images for model training, with a probability-based method to decide between a random patch or a patch with non-zero labels. Helper functions like <code>get_random_patch</code> and <code>get_centered_patch</code> determine the starting indices and dimensions for the patches based on given configurations, while padding methods ensure consistency even if the patch exceeds the original image dimensions. Probabilistic oversampling, as configured, allows for more balanced and informative data sampling, which improves the model‚Äôs ability to detect specific medical features.</p>
<details>
<summary>
extract_patch:
</summary>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">extract_patch</span>(image, label, patch_size, config)</span>
<span id="cb4-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fetch the oversampling probability from the config</span></span>
<span id="cb4-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">println</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Extracting patch."</span>)</span>
<span id="cb4-4">    oversampling_probability <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> config[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"learning"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"oversampling_probability"</span>]</span>
<span id="cb4-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a random number to decide which patch extraction method to use</span></span>
<span id="cb4-6">    random_choice <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rand</span>()</span>
<span id="cb4-7"></span>
<span id="cb4-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> random_choice <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> oversampling_probability</span>
<span id="cb4-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">extract_nonzero_patch</span>(image, label, patch_size)</span>
<span id="cb4-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span></span>
<span id="cb4-11"></span>
<span id="cb4-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_random_patch</span>(image, label, patch_size)</span>
<span id="cb4-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span>
<span id="cb4-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span>
<span id="cb4-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Helper function, in case the mask is emptyClick to apply</span></span>
<span id="cb4-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">extract_nonzero_patch</span>(image, label, patch_size)</span>
<span id="cb4-17">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">println</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Extracting a patch centered around a non-zero label value."</span>)</span>
<span id="cb4-18">    indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">findall</span>(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, label)</span>
<span id="cb4-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isempty</span>(indices)</span>
<span id="cb4-20">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fallback to random patch if no non-zero points are found</span></span>
<span id="cb4-21">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_random_patch</span>(image, label, patch_size)</span>
<span id="cb4-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span></span>
<span id="cb4-23">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Choose a random non-zero index to center the patch around</span></span>
<span id="cb4-24">        center <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> indices[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rand</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(indices))]</span>
<span id="cb4-25">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_centered_patch</span>(image, label, center, patch_size)</span>
<span id="cb4-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span>
<span id="cb4-27"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span>
<span id="cb4-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Function to get a patch centered around a specific index</span></span>
<span id="cb4-29"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_centered_patch</span>(image, label, center, patch_size)</span>
<span id="cb4-30">    center_coords <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tuple</span>(center)</span>
<span id="cb4-31">    half_patch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> patch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.√∑</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb4-32">    start_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> center_coords <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.-</span> half_patch</span>
<span id="cb4-33">    end_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> start_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.+</span> patch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb4-34"></span>
<span id="cb4-35">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate padding needed</span></span>
<span id="cb4-36">    pad_beg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb4-37">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start_indices[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb4-38">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start_indices[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb4-39">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start_indices[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>], <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb4-40">    )</span>
<span id="cb4-41">    pad_end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb4-42">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(end_indices[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">size</span>(image, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb4-43">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(end_indices[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">size</span>(image, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb4-44">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(end_indices[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">size</span>(image, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb4-45">    )</span>
<span id="cb4-46"></span>
<span id="cb4-47">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adjust start_indices and end_indices after padding</span></span>
<span id="cb4-48">    start_indices_adj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> start_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.+</span> pad_beg</span>
<span id="cb4-49">    end_indices_adj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> end_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.+</span> pad_beg</span>
<span id="cb4-50"></span>
<span id="cb4-51">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert padding values to integers</span></span>
<span id="cb4-52">    pad_beg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tuple</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>.(<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span>, pad_beg))</span>
<span id="cb4-53">    pad_end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tuple</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>.(<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span>, pad_end))</span>
<span id="cb4-54"></span>
<span id="cb4-55">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pad the image and label using pad_mi</span></span>
<span id="cb4-56">    image_padded <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pad_mi</span>(image, pad_beg, pad_end, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb4-57">    label_padded <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pad_mi</span>(label, pad_beg, pad_end, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb4-58"></span>
<span id="cb4-59">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the patch</span></span>
<span id="cb4-60">    image_patch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image_padded[</span>
<span id="cb4-61">        start_indices_adj[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>end_indices_adj[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],</span>
<span id="cb4-62">        start_indices_adj[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>end_indices_adj[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>],</span>
<span id="cb4-63">        start_indices_adj[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>end_indices_adj[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb4-64">    ]</span>
<span id="cb4-65">    label_patch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> label_padded[</span>
<span id="cb4-66">        start_indices_adj[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>end_indices_adj[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],</span>
<span id="cb4-67">        start_indices_adj[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>end_indices_adj[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>],</span>
<span id="cb4-68">        start_indices_adj[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>end_indices_adj[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb4-69">    ]</span>
<span id="cb4-70"></span>
<span id="cb4-71">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> image_patch, label_patch</span>
<span id="cb4-72"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span>
<span id="cb4-73"></span>
<span id="cb4-74"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_random_patch</span>(image, label, patch_size)</span>
<span id="cb4-75">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">println</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Extracting a random patch."</span>)</span>
<span id="cb4-76">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if the patch size is greater than the image dimensions</span></span>
<span id="cb4-77">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">any</span>(patch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">size</span>(image))</span>
<span id="cb4-78">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the needed size to fit the patch</span></span>
<span id="cb4-79">        needed_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(max, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">size</span>(image), patch_size)</span>
<span id="cb4-80">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use crop_or_pad to ensure the image and label are at least as large as needed_size</span></span>
<span id="cb4-81">        image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">crop_or_pad</span>(image, needed_size)</span>
<span id="cb4-82">        label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">crop_or_pad</span>(label, needed_size)</span>
<span id="cb4-83">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span>
<span id="cb4-84"></span>
<span id="cb4-85">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate random start indices within the new allowable range</span></span>
<span id="cb4-86">    start_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rand</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">size</span>(image, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> patch_size[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-87">    start_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rand</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">size</span>(image, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> patch_size[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-88">    start_z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rand</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">size</span>(image, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> patch_size[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-89">    start_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [start_x, start_y, start_z]</span>
<span id="cb4-90">    end_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> start_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.+</span> patch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb4-91"></span>
<span id="cb4-92">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the patch directly when within bounds</span></span>
<span id="cb4-93">    image_patch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image[start_indices[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>end_indices[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], start_indices[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>end_indices[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], start_indices[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>end_indices[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]]</span>
<span id="cb4-94">    label_patch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> label[start_indices[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>end_indices[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], start_indices[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>end_indices[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], start_indices[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>end_indices[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]]</span>
<span id="cb4-95"></span>
<span id="cb4-96">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> image_patch, label_patch</span>
<span id="cb4-97"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span></code></pre></div>
</details>
</section>
<section id="calculate-median-and-mean-spacing-with-resampling" class="level2">
<h2 class="anchored" data-anchor-id="calculate-median-and-mean-spacing-with-resampling">Calculate Median and Mean Spacing with resampling üÜô</h2>
<p>This part ensures that all images in the dataset have consistent real coordinates, spacing, and shape. It‚Äôs a critical factor in medical imaging for accurate analysis. Calculating and applying set values, median or mean across images ensures uniformity.</p>
<section id="resample-images-to-target-image" class="level4">
<h4 class="anchored" data-anchor-id="resample-images-to-target-image">Resample images to target image üÜô</h4>
<p>This step aligns each image to the reference coordinates of the main image, ensuring that all images share a common spatial alignment. The <code>resample_to_image</code> function from MedImage.jl is used here, applying interpolation to adjust each image.</p>
<details>
<summary>
resample_images_to_target:
</summary>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb5-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> resample_images_to_target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> !<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isempty</span>(Med_images)</span>
<span id="cb5-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">println</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Resampling </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>channel_type<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> files in channel '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>channel_folder<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' to the first </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>channel_type<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> in the channel."</span>)</span>
<span id="cb5-3">    reference_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Med_images[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb5-4">    Med_images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">resample_to_image</span>(reference_image, img, interpolator) for img <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> Med_images]</span>
<span id="cb5-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span></code></pre></div>
</details>
<p>Comment:<br> <code>Resample_to_image</code> uses interpolation that is not yet GPU-accelerated in this implementation, this step slows down the data preparation phase significantly.</p>
</section>
<section id="ensure-uniform-spacing-across-the-entire-dataset" class="level4">
<h4 class="anchored" data-anchor-id="ensure-uniform-spacing-across-the-entire-dataset">Ensure uniform spacing across the entire dataset üÜô</h4>
<p>This step brings all images to a consistent voxel spacing across the dataset using <code>resample_to_spacing</code> from MedImage.jl. This uniform spacing is crucial for creating a standardized dataset where each image voxel represents the same physical volume.</p>
<details>
<summary>
esample_to_spacing:
</summary>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb6-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> resample_images_spacing <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"set"</span></span>
<span id="cb6-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">println</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Resampling all </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>channel_type<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> files to target spacing: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>target_spacing<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb6-3">    target_spacing <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tuple</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Float32</span>(s) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> s <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> target_spacing)</span>
<span id="cb6-4">    channels_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">resample_to_spacing</span>(img, target_spacing, interpolator) for img <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> channel] for channel <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> channels_data]</span>
<span id="cb6-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elseif</span> resample_images_spacing <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"avg"</span></span>
<span id="cb6-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">println</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Calculating average spacing across all </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>channel_type<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> files and resampling."</span>)</span>
<span id="cb6-7">    all_spacings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [img.spacing for channel <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> channels_data for img <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> channel]</span>
<span id="cb6-8">    avg_spacing <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tuple</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Float32</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(s)) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> s <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">zip</span>(all_spacings<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span>))</span>
<span id="cb6-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">println</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Average spacing calculated: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>avg_spacing<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb6-10">    channels_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">resample_to_spacing</span>(img, avg_spacing, interpolator) for img <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> channel] for channel <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> channels_data]</span>
<span id="cb6-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elseif</span> resample_images_spacing <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"median"</span></span>
<span id="cb6-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">println</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Calculating median spacing across all </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>channel_type<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> files and resampling."</span>)</span>
<span id="cb6-13">    all_spacings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [img.spacing for channel <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> channels_data for img <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> channel]</span>
<span id="cb6-14">    median_spacing <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tuple</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Float32</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">median</span>(s)) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> s <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> all_spacings)</span>
<span id="cb6-15">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">println</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Median spacing calculated: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>median_spacing<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb6-16">    channels_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">resample_to_spacing</span>(img, median_spacing, interpolator) for img <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> channel] for channel <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> channels_data]</span>
<span id="cb6-17"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elseif</span> resample_images_spacing <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">false</span></span>
<span id="cb6-18">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">println</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Skipping resampling of </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>channel_type<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> files."</span>)</span>
<span id="cb6-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># No resampling will be applied, channels_data remains unchanged.</span></span>
<span id="cb6-20"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span></code></pre></div>
</details>
<p>Comment:<br> <code>Resample_to_spacing</code> uses interpolation that is not yet GPU-accelerated in this implementation, this step slows down the data preparation phase significantly.</p>
</section>
<section id="resizing-all-channel-files-to-average-or-target-size" class="level4">
<h4 class="anchored" data-anchor-id="resizing-all-channel-files-to-average-or-target-size">Resizing all channel files to average or target size ‚úÖ</h4>
<p>To create a cohesive 5D tensor, all images in each channel are resized to a uniform shape, either the average size of all images or a specific target size. This resizing process uses <code>crop_or_pad</code>, ensuring that all images match the specified dimensions, making them suitable for model input.</p>
<details>
<summary>
crop_or_pad:
</summary>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb7-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> resample_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"avg"</span></span>
<span id="cb7-2">    sizes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">size</span>(img.voxel_data) for img <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> channels_data for img <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> img]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get sizes from all images</span></span>
<span id="cb7-3">    avg_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(mean, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">zip</span>(sizes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span>))</span>
<span id="cb7-4">    avg_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tuple</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Int</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(d)) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> d <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> avg_dim)</span>
<span id="cb7-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">println</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Resizing all </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>channel_type<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> files to average dimension: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>avg_dim<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb7-6">    channels_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">crop_or_pad</span>(img, avg_dim) for img <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> channel] for channel <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> channels_data]</span>
<span id="cb7-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elseif</span> resample_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"avg"</span></span>
<span id="cb7-8">    target_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Tuple</span>(resample_size)</span>
<span id="cb7-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">println</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Resizing all </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>channel_type<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> files to target dimension: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>target_dim<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb7-10">    channels_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">crop_or_pad</span>(img, target_dim) for img <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> channel] for channel <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> channels_data]</span>
<span id="cb7-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span></code></pre></div>
</details>
</section>
</section>
<section id="basic-post-processing-operations" class="level2">
<h2 class="anchored" data-anchor-id="basic-post-processing-operations">Basic Post-processing operations</h2>
<p>Post-processing operations involve the algorithm <code>largest_connected_components</code>. It is achieved by label initialization and propagation in the segmented mask. The <code>initialize_labels_kernel</code> function assigns unique labels to different regions.</p>
<details>
<summary>
initialize_labels_kernel:
</summary>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb8-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">@kernel</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">initialize_labels_kernel</span>(mask, labels, width, height, depth)</span>
<span id="cb8-2">    idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">@index</span>(Global, Cartesian)</span>
<span id="cb8-3">    i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> idx[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb8-4">    j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> idx[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb8-5">    k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> idx[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb8-6">    </span>
<span id="cb8-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> depth</span>
<span id="cb8-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> mask[i, j, k] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb8-9">            labels[i, j, k] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> height</span>
<span id="cb8-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span></span>
<span id="cb8-11">            labels[i, j, k] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb8-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span>
<span id="cb8-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span>
<span id="cb8-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span></code></pre></div>
</details>
Propagate_labels_kernel iteratively updates the labels to maintain connected regions. propagate_labels_kernel:
<details>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb9-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">@kernel</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">propagate_labels_kernel</span>(mask, labels, width, height, depth)</span>
<span id="cb9-2">    idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">@index</span>(Global, Cartesian)</span>
<span id="cb9-3">    i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> idx[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb9-4">    j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> idx[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb9-5">    k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> idx[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb9-6"></span>
<span id="cb9-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> depth</span>
<span id="cb9-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> mask[i, j, k] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb9-9">            current_label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> labels[i, j, k]</span>
<span id="cb9-10">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> di <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb9-11">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> dj <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb9-12">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> dk <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb9-13">                        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> di <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> dj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> dk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb9-14">                            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">continue</span></span>
<span id="cb9-15">                        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span>
<span id="cb9-16">                        ni <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> di</span>
<span id="cb9-17">                        nj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> dj</span>
<span id="cb9-18">                        nk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> dk</span>
<span id="cb9-19">                        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> ni <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> ni <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> nj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> nj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> nk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> nk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> depth</span>
<span id="cb9-20">                            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> mask[ni, nj, nk] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> labels[ni, nj, nk] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> current_label</span>
<span id="cb9-21">                                labels[i, j, k] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> labels[ni, nj, nk]</span>
<span id="cb9-22">                            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span>
<span id="cb9-23">                        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span>
<span id="cb9-24">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span>
<span id="cb9-25">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span>
<span id="cb9-26">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span>
<span id="cb9-27">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span>
<span id="cb9-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span>
<span id="cb9-29"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span></code></pre></div>
</details>
<p>This process facilitates the identification of the largest connected components in 3D space, helping to isolate relevant medical structures, such as tumors, in the segmented mask. Allowing determining how many such areas are to be returned.</p>
<details>
<summary>
largest_connected_components:
</summary>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb10-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">largest_connected_components</span>(mask<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Array{Int32, 3}</span>, n_lcc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span>)</span>
<span id="cb10-2">    width, height, depth <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">size</span>(mask)</span>
<span id="cb10-3">    mask_gpu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CuArray</span>(mask)</span>
<span id="cb10-4">    labels_gpu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CUDA.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fill</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">size</span>(mask))</span>
<span id="cb10-5">    dev <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_backend</span>(labels_gpu)</span>
<span id="cb10-6">    ndrange <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (width, height, depth)</span>
<span id="cb10-7">    workgroupsize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb10-8"></span>
<span id="cb10-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize labels</span></span>
<span id="cb10-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">initialize_labels_kernel</span>(dev)(mask_gpu, labels_gpu, width, height, depth, ndrange <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ndrange)</span>
<span id="cb10-11">    CUDA.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">synchronize</span>()</span>
<span id="cb10-12"></span>
<span id="cb10-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Propagate labels iteratively</span></span>
<span id="cb10-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> </span>
<span id="cb10-15">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">propagate_labels_kernel</span>(dev, workgroupsize)(mask_gpu, labels_gpu, width, height, depth, ndrange <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ndrange)</span>
<span id="cb10-16">        CUDA.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">synchronize</span>()</span>
<span id="cb10-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span>
<span id="cb10-18"></span>
<span id="cb10-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download labels back to CPU</span></span>
<span id="cb10-20">    labels_cpu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Array</span>(labels_gpu)</span>
<span id="cb10-21">    </span>
<span id="cb10-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find all unique labels and their sizes</span></span>
<span id="cb10-23">    unique_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(labels_cpu)</span>
<span id="cb10-24">    label_sizes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(label, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(labels_cpu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.==</span> label)) for label <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> unique_labels if label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb10-25"></span>
<span id="cb10-26">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sort labels by size and get the top n_lcc</span></span>
<span id="cb10-27">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sort!</span>(label_sizes, by <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> x[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], rev <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">true</span>)</span>
<span id="cb10-28">    top_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> label_sizes[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(n_lcc, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(label_sizes))]</span>
<span id="cb10-29"></span>
<span id="cb10-30">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a mask for each of the top n_lcc components</span></span>
<span id="cb10-31">    components <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [labels_cpu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.==</span> label[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] for label <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> top_labels]</span>
<span id="cb10-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> components</span>
<span id="cb10-33"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span></code></pre></div>
</details>
</section>
<section id="structured-configuration-of-all-hyperparameters" class="level2">
<h2 class="anchored" data-anchor-id="structured-configuration-of-all-hyperparameters">Structured configuration of all hyperparameters üÜô</h2>
<p>Hyperparameters for the entire pipeline are stored in a JSON configuration file, enabling straightforward adjustments for experimentation (just swap values, save and resume the study). This structured setup allows easy modification of key parameters, such as data set preparation, training settings, data augmentation, and resampling options.</p>
<details>
<summary>
Example configuration:
</summary>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource json number-lines code-with-copy"><code class="sourceCode json"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-2">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"model"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-3">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"patience"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-4">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"early_stopping_metric"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"val_loss"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-5">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"optimizer_name"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adam"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-6">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"loss_function_name"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"l1"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-7">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"early_stopping"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">true</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-8">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"early_stopping_min_delta"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">.01</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-9">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"optimizer_args"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lr=0.001"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-10">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"num_epochs"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb11-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb11-12">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"data"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-13">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"batch_complete"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">false</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-14">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"resample_size"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">49</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-15">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"resample_to_target"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">false</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-16">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"resample_to_spacing"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">false</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-17">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"batch_size"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-18">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"standardization"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">false</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-19">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"target_spacing"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">null</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-20">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"channel_size"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-21">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"normalization"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">false</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-22">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"has_mask"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">true</span></span>
<span id="cb11-23">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb11-24">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"augmentation"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-25">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"augmentations"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-26">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Brightness transform"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-27">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"mode"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"additive"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-28">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"value"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb11-29">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-30">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb11-31">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"p_rand"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-32">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"processing_unit"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GPU"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-33">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"order"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb11-34">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Brightness transform"</span></span>
<span id="cb11-35">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb11-36">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb11-37">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"learning"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-38">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Train_Val_Test_JSON"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">false</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-39">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"largest_connected_component"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">false</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-40">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"n_lcc"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-41">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"n_folds"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-42">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"invertible_augmentations"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">false</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-43">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"n_invertible"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">true</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-44">        </span>
<span id="cb11-45">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"class_JSON_path"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">false</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-46">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"additional_JSON_path"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">false</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-47">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"patch_size"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-48">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"metric"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dice"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-49">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"n_cross_val"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">false</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-50">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"patch_probabilistic_oversampling"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">false</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-51">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"oversampling_probability"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-52">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"test_train_validation"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb11-53">            <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-54">            <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-55">            <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb11-56">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-57">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"shuffle"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">false</span></span>
<span id="cb11-58">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-59"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</details>
<p>Comments:<br> The current configuration is loaded as a dictionary, which simplifies access and modification. This setup presents a strong foundation for integrating automated search algorithms for hyperparameter tuning, enabling more efficient model optimization.<br> The configuration structure could be reorganized and re-named to improve readability, making it easier for users to locate and adjust specific parameters.</p>
</section>
<section id="visualization-of-algorithm-outputs" class="level2">
<h2 class="anchored" data-anchor-id="visualization-of-algorithm-outputs">Visualization of algorithm outputs ‚ö†Ô∏è</h2>
<p>This module provides basic visualization functionality by saving output masks and images first to MedImage format and then to Nifti format. The <code>create_nii_from_medimage</code> function from MedImage.jl generates Nifti files, which can be loaded into MedEye3D for 3D visualization.</p>
<p>Comments:<br> Integrating this visualization module more fully with the pipeline could eliminate unnecessary steps. By automatically loading output masks and images as raw data into MedEye3D for 3D visualization and supporting a more efficient end-to-end workflow.</p>
</section>
<section id="k-fold-cross-validation-functionality" class="level2">
<h2 class="anchored" data-anchor-id="k-fold-cross-validation-functionality">K-fold cross-validation functionality ‚úÖ</h2>
<p>K-fold cross-validation is implemented to evaluate model performance more robustly. The data is split into multiple folds, with each fold serving as a validation set once, while the others form the training set. This functionality provides a better assessment of model performance across different subsets of the data.</p>
<details>
<summary>
K-fold cross-validation functionality:
</summary>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb12-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span></span>
<span id="cb12-2">  tstate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">initialize_train_state</span>(rng, model, optimizer)</span>
<span id="cb12-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> config[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"learning"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n_cross_val"</span>]</span>
<span id="cb12-4">      n_folds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> config[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"learning"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n_folds"</span>]</span>
<span id="cb12-5">      all_tstate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb12-6">      combined_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [indices_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"train"</span>]; indices_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"validation"</span>]]</span>
<span id="cb12-7">      shuffled_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shuffle</span>(rng, combined_indices)</span>
<span id="cb12-8">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> fold <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n_folds</span>
<span id="cb12-9">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">println</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Starting fold </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>fold<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>n_folds<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-10">          train_groups, validation_groups <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">k_fold_split</span>(combined_indices, n_folds, fold, rng)</span>
<span id="cb12-11">          </span>
<span id="cb12-12">          tstate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">initialize_train_state</span>(rng, model, optimizer)</span>
<span id="cb12-13">          final_tstate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">epoch_loop</span>(num_epochs, train_groups, validation_groups, h5, model, tstate, config, loss_function, num_classes)</span>
<span id="cb12-14">          </span>
<span id="cb12-15">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">push!</span>(all_tstate, final_tstate)</span>
<span id="cb12-16">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span>
<span id="cb12-17">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span></span>
<span id="cb12-18">      final_tstate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">epoch_loop</span>(num_epochs, train_groups, validation_groups, h5, model, tstate, config, loss_function, num_classes)</span>
<span id="cb12-19">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span>
<span id="cb12-20">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> final_tstate</span>
<span id="cb12-21"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span>  </span></code></pre></div>
</details>
<p>The <code>k_fold_split</code> function organizes the indices for each fold, ensuring comprehensive coverage of the dataset during training.</p>
<details>
<summary>
k_fold_split
</summary>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb13-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">k_fold_split</span>(data, n_folds, current_fold)</span>
<span id="cb13-2">    fold_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(data) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">√∑</span> n_folds</span>
<span id="cb13-3">    validation_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (current_fold <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> fold_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb13-4">    validation_end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> validation_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> fold_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb13-5">    validation_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[validation_start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>validation_end]</span>
<span id="cb13-6">    train_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [data[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>validation_start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]; data[validation_end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span>]]</span>
<span id="cb13-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> train_indices, validation_indices</span>
<span id="cb13-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span></code></pre></div>
</details>
</section>
</section>
<section id="conclusions-and-future-development" class="level1">
<h1>Conclusions and Future Development</h1>
<p>I have successfully established a foundation for a medical imaging pipeline, addressing significant challenges in data handling, model training, and augmentation integration. The integration of dataset-wide functions has significantly enhanced the reproducibility and handling of batched data with GPU support enabling scalability of experiments, making it easier for researchers and practitioners to produce better results.</p>
</section>
<section id="future-development" class="level1">
<h1>Future Development</h1>
<p>As we look to the future, there are several areas where MedPipe3D can be expanded and improved to better serve the medical AI community. These include:</p>
<section id="necessary-enhancements" class="level2">
<h2 class="anchored" data-anchor-id="necessary-enhancements">Necessary Enhancements</h2>
<p>Comprehensive Logging: Develop detailed logging mechanisms that capture a wide range of events, including system statuses, model performance metrics, and user activities, to facilitate debugging and system optimization. This is currently executed as a simple <code>println</code> function.</p>
<p>TensorBoard Integration: Implement an interface for TensorBoard to allow users to visualize training dynamics in real time, providing insights into model behavior and performance trends.</p>
<p>Error and Warning Logs: Introduce advanced error and warning logging capabilities to alert users of potential issues before they affect the pipeline‚Äôs performance, ensuring smoother operations and maintenance.</p>
<p>Automated Visualization: Integrate MedEye3D directly into MedPipe3D to enable automated visualization of outputs, such as segmentation masks or other relevant medical imaging features. This feature would provide users with real-time visual feedback on model performance and data quality. Code-Level Documentation: Due to needed changes in the fundamental structure of the pipeline in the final phase of the project, it is necessary to reevaluate all documentation.</p>
<p>Official JuliaHealth Documentation: Extend the documentation efforts to include official entries on juliahealth.org, providing a centralized and authoritative resource for users seeking to learn more about MedPipe3D and its capabilities with examples shown</p>
</section>
<section id="potential-enhancements" class="level2">
<h2 class="anchored" data-anchor-id="potential-enhancements">Potential Enhancements</h2>
<p>GPU support for interpolation will allow for significant acceleration of such functions as Scale transform, Simulate, Low-resolution transform, Elastic deformation transform, and Resampling spacing.</p>
<p>Add more reversible augmentations to test time.</p>
<p>Calculating the average of the edges of the picture: checking the type of photo and calculating more correctly on this basis</p>
<p>Elastic deformation transforms with the simulation of different tissue elasticities.</p>
</section>
</section>
<section id="acknowledgments" class="level1">
<h1>Acknowledgments üôá‚Äç‚ôÇÔ∏è</h1>
<p>I would like to express my deepest gratitude to my mentor Dr.&nbsp;<a href="https://www.linkedin.com/in/jakub-mitura-7b2013151/">Jakub Mitura</a> for his invaluable guidance and support throughout this project. His expertise and encouragement were instrumental in overcoming challenges and achieving project milestones.</p>


<!-- -->

</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a><div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{zubik2024,
  author = {Zubik, Jan},
  title = {GSoC ‚Äô24: {Adding} Dataset-Wide Functions and Integrations of
    Augmentations},
  date = {2024-11-03},
  url = {https://juliahealth.org/JuliaHealthBlog/posts/JZubik-gsoc/GSoC_Jan_Zubik_MedPipe3D.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-zubik2024" class="csl-entry quarto-appendix-citeas">
Zubik, Jan. 2024. <span>‚ÄúGSoC ‚Äô24: Adding Dataset-Wide Functions and
Integrations of Augmentations.‚Äù</span> November 3, 2024. <a href="https://juliahealth.org/JuliaHealthBlog/posts/JZubik-gsoc/GSoC_Jan_Zubik_MedPipe3D.html">https://juliahealth.org/JuliaHealthBlog/posts/JZubik-gsoc/GSoC_Jan_Zubik_MedPipe3D.html</a>.
</div></div></section></div> ]]></description>
  <category>gsoc</category>
  <category>AI/ML</category>
  <category>imaging</category>
  <category>gpu</category>
  <category>analysis</category>
  <guid>https://juliahealth.org/JuliaHealthBlog/posts/JZubik-gsoc/GSoC_Jan_Zubik_MedPipe3D.html</guid>
  <pubDate>Sat, 02 Nov 2024 18:30:00 GMT</pubDate>
</item>
<item>
  <title>GSoC ‚Äô24: Adding functionalities to medical imaging visualizations</title>
  <dc:creator>Divyansh Goyal</dc:creator>
  <link>https://juliahealth.org/JuliaHealthBlog/posts/divyansh-gsoc/gsoc-2024-fellows.html</link>
  <description><![CDATA[ 




<section id="hello-everyone" class="level1">
<h1>Hello Everyone! üëã</h1>
<p>I am Divyansh, an undergraduate student from Guru Gobind Singh Indraprastha university, majoring in Artificial Intelligence and Machine Learning. Stumbling upon projects under the Juliahealth sub-ecosystem of medical imaging packages, the intricacies of imaging modalities and file formats, reflected in their relevant project counterparts, captured my interest. Working with standards such as NIfTI (Neuroimaging Informatics Technology Initiative) and DICOM (Digital Imaging and Communications in Medicine) with MedImages.jl, I became interested in the visualization routines of such imaging datasets and their integration within the segmentation pipelines for modern medical-imaging analysis.</p>
<p>In this post, I‚Äôd like to summarize what I did this summer and everything I learned along the way, contributing to MedEye3d.jl medical imaging visualizer under GSOC-2024!</p>
<blockquote class="blockquote">
<p>If you want to learn more about me, you can connect with me on <a href="https://www.linkedin.com/in/divyansh-goyal-34654b200/"><strong>LinkedIn</strong></a> and follow me on <a href="https://github.com/divital-coder"><strong>GitHub</strong></a></p>
</blockquote>
</section>
<section id="background" class="level1">
<h1>Background</h1>
<section id="what-is-medeye3d.jl" class="level2">
<h2 class="anchored" data-anchor-id="what-is-medeye3d.jl">What is MedEye3d.jl?</h2>
<p><a href="https::/github.com/Juliahealth/MedEye3d.jl">MedEye3D.jl</a> is a package under the Julia language ecosystem designed to facilitate the visualization and annotation of medical images. Tailored specifically for medical applications, it offers a range of functionalities to enhance the interpretation and analysis of medical images. MedEye3D aims to provide an essential tool for 3D medical imaging workflow within Julia. The underlying combination of <a href="https://github.com/ReactiveBayes/Rocket.jl">Rocket.jl</a> and <a href="https://github.com/JuliaGL/ModernGL.jl">ModernGL.jl</a> ensures the high-performance robust visualizations that the package has to offer.</p>
<p>MedEye3d.jl is open-source and comes with an intuitive user interface (To learn more about MedEye3d, you can read the paper introducing it <a href="https://doi.org/10.26348/znwwsi.25.57">here</a> <span class="citation" data-cites="Mitura2021">[1]</span>).</p>
</section>
<section id="what-features-does-this-project-encompass" class="level2">
<h2 class="anchored" data-anchor-id="what-features-does-this-project-encompass">What features does this project encompass?</h2>
<p>This project covers implementation of several tasks that will enable the establishment of additional important functionalities within the MedEye3D package, facilitating enhancements within the visualization‚Äôs windowing for MRI and PET data, support for super voxels (sv), improved load times, high-level functionality implementation and robust viewing for multiple images.</p>
</section>
</section>
<section id="project-goals" class="level1">
<h1>Project Goals</h1>
<p>The goals outlined by Dr.&nbsp;Jakub Mitura (my project mentor) and I, beginning of this summer were:</p>
<ol type="1">
<li><p>Migration of package reliance from <a href="https://github.com/reactivebayes/Rocket.jl">Rocket.jl</a> to base Julia channel and macros: The first decision that was made was to fix the issue of screen tearing and flicker, resulting from the Rocket.jl‚Äôs actor-subscription mechanism present at the core of MedEye3d.jl‚Äôs event-driven programming. Here, Julia‚Äôs threadsafe and asynchronous <a href="https://docs.julialang.org/en/v1/manual/asynchronous-programming/">channels</a> provided a way to introduce reactive programming and state management within MedEye3d without the tradeoffs resulting from external packages such as Rocket</p></li>
<li><p>Implementation of high level functions with simplified basic usage: Prior to this, MedEye3d involved initialization of data, texture specifications and text display for a final visualization. To reduce complexity, methods to abstract such chores were devised and implemented which resulted in the exposure of functions for loading images, accessing display data and modification of display data. This also encompassed the loading of images via <a href="https://github.com/juliahealth/MedImages.jl">MedImages.jl</a> which required prior work for the integration of C++ <a href="https://github.com/InsightSoftwareConsortium/ITK">ITK</a> backend for image I/O.</p></li>
<li><p>Improved precompilation with decreased outputs to reduce start time</p></li>
<li><p>Automatic windowing for most common MRI and PET modalities: This task is a step in the direction of maintaining consistent visualizations across MRI and PET‚Äôs most common modalities, to mimic images similar to what is displayed within <a href="https://www.slicer.org/">3dSlicer</a> for the same.</p></li>
<li><p>Adding support for multi-image viewing with crosshair marker for image registration</p></li>
<li><p>Adding support for the display of <a href="https://doi.org/10.1016/j.cagd.2022.102080">SuperVoxels</a> sv with borders within the image slices to better understand anatomical regions within slices: Supervoxels, described either through indicator masks or meshes, encapsulate regions of interest with distinct image characteristics.</p></li>
</ol>
<p>Additionally, we had a few stretch goals which are going to be a work in progress:</p>
<ol type="1">
<li><p>Visualization of structures by 3D rendering using OpenGL,</p></li>
<li><p>Support for MedVoxelHD visualization by voxel-based Hausdorff distance computation.</p></li>
<li><p>Support for OSX users</p></li>
</ol>
</section>
<section id="tasks" class="level1">
<h1>Tasks</h1>
<section id="migration-of-package-from-rocket-to-julias-base.channel" class="level2">
<h2 class="anchored" data-anchor-id="migration-of-package-from-rocket-to-julias-base.channel">1. Migration of package from Rocket to Julia‚Äôs Base.Channel</h2>
<p>Initially, there was significant screen-tearing evident from the pixelated display of the rendered text and main image which, furthermore exhibited flickering upon scrolling through the slices in the relevant displayed image‚Äôs planar views i.e (Transversal, Coronal and Saggital). Troubleshooting along the way, we narrowed down the issue within the Rocket‚Äôs actor-subscription mechanism and decided to integrate Julia‚Äôs Base.Channel within <a href="https://github.com/Juliahealth/MedEye3d.jl">MedEye3d.jl</a> for handling the event and state management routine. Julia has asynchronous, threadsafe <a href="https://docs.julialang.org/en/v1/manual/asynchronous-programming/#Communicating-with-Channels">channels</a> which facilitate in asynchronous programming with the help of a producer-consumer mechanism. An example usage of Base.Channel is as follows:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">consumer</span>(channel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Base.Channel</span>)</span>
<span id="cb1-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">true</span>)</span>
<span id="cb1-3">    channelData<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">String </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">take!</span>(channel)</span>
<span id="cb1-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">println</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Channel got "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> channelData)</span>
<span id="cb1-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span>
<span id="cb1-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span>
<span id="cb1-7"></span>
<span id="cb1-8">newChannel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Base</span>.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Channel</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">@async</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">consumer</span>(newChannel)</span>
<span id="cb1-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">put!</span>(newChannel, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"apples"</span>)</span></code></pre></div>
<p>Julia‚Äôs multiple dispatch made for the architectural setup of MedEye3d, facilitated fixing the issue of screen tearing. Below is how the <code>on_next!</code> function, invokes different reactive components based on the types of arguments it is dealing with.</p>
<blockquote class="blockquote">
<p>Dump data in channel -&gt; fetch data from the channel in an event loop -&gt; invoke <code>on_next!(state, channelData)</code> -&gt; invoke relevant functionality based on the type of arguments passed</p>
</blockquote>
<p><img src="https://juliahealth.org/JuliaHealthBlog/posts/divyansh-gsoc/multiple_dispatch_code.png" class="img-fluid"></p>
<p>The end result was a visualizer with a seamless display of a CT image without any pixelating artifacts.</p>
<p><img src="https://juliahealth.org/JuliaHealthBlog/posts/divyansh-gsoc/fixed_screen_tear.png" class="img-fluid"></p>
</section>
<section id="implementation-of-high-level-functions-with-simplified-basic-usage" class="level2">
<h2 class="anchored" data-anchor-id="implementation-of-high-level-functions-with-simplified-basic-usage">2. Implementation of high level functions with simplified basic usage</h2>
<p>Implementing a bare-bones image visualization required a lot of function calls and definitions, in order to execute the following phases:</p>
<ol type="1">
<li><p>Rendering an image-plane with OpenGL</p></li>
<li><p>Loading data slices from the image</p></li>
<li><p>Creating texture specifications for modalities</p></li>
<li><p>Producing the final segmentation display</p></li>
</ol>
<p>In order to simplify basic usage, high-level abstractions were put in place with the help of <a href="https://github.com/MedImages.jl">MedImages.jl</a> (under ongoing development) library to load images in the form of MedImage objects to formulate a single display function for the user. Further simplifications were made to accommodate options for the user to manipulate the imaging data that is displayed currently in the visualizer i.e retrieval of voxel arrays and their modification. Taking this in mind, the following relevant functions were exposed:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb2-1">MedEye3d.SegmentationDisplay.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">displayImage</span>()</span></code></pre></div>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb3-1">MedEye3d.DisplayDataManag.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getDisplayedData</span>()</span></code></pre></div>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb4-1">MedEye3d.DisplayDataManag.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setDisplayedData</span>()</span></code></pre></div>
<p>Putting all of the above functions to use together, we can launch the visualizer, retrieve the displayed voxel data and modify it to our liking. A sample script to achieve the former, is highlighted below:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">using</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">MedEye3d</span></span>
<span id="cb5-2">ctNiftiImage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/hurtbadly/Downloads/ct_soft_study.nii.gz"</span></span>
<span id="cb5-3">medEyeStruct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MedEye3d.SegmentationDisplay.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">displayImage</span>(ctNiftiImage)</span>
<span id="cb5-4">displayData <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MedEye3d.DisplayDataManag.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getDisplayedData</span>(medEyeStruct, [<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Int32</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Int32</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#passing the active texture number</span></span>
<span id="cb5-5"></span>
<span id="cb5-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># We need to check if the return type of the displayData is a single Array{Float32,3} or a vector{Array{Float32,3}}</span></span>
<span id="cb5-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Now in this case we are setting Gaussian noise over the manualModif Texture voxel layer, and the manualModif texture defaults to 2 for active number</span></span>
<span id="cb5-8"></span>
<span id="cb5-9">displayData[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>][<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">randn</span>(<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Float32</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">size</span>(displayData[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]))</span>
<span id="cb5-10">MedEye3d.DisplayDataManag.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setDisplayedData</span>(medEyeStruct, displayData)</span></code></pre></div>
<p>The result of this <a href="https://www.sfu.ca/sonic-studio-webdav/handbook/Gaussian_Noise.html">Gaussian noise</a> within the annotation layer, made for an outcome like the following:</p>
<p><img src="https://juliahealth.org/JuliaHealthBlog/posts/divyansh-gsoc/gaussian_noise_annotation.png" class="img-fluid"></p>
</section>
<section id="improved-precompilation-with-decreased-outputs-to-reduce-start-time" class="level2">
<h2 class="anchored" data-anchor-id="improved-precompilation-with-decreased-outputs-to-reduce-start-time">3. Improved precompilation with decreased outputs to reduce start time</h2>
<p>Previously, the package‚Äôs precompilation was failing in Julia v1.9 and v1.10 due to pattern matching errors arising after the usage of match macros from the <a href="https://github.com/JuliaServices/Match.jl">Match.jl</a> pkg in MedEye3d‚Äôs keymapping workflow between GLFW callbacks from mouse and keyboard. The relevant equivalent native conditional (if-else) statements, resolved the issue and facilitated in successful precompilation of the package. Further, only following minimal outputs were produced during precompilation:</p>
<p><img src="https://juliahealth.org/JuliaHealthBlog/posts/divyansh-gsoc/precompilation_outputs.png" class="img-fluid"></p>
<p>Changes highlighted within the following pull-request:</p>
<p><a href="https://github.com/JuliaHealth/MedEye3d.jl/pull/12">https://github.com/JuliaHealth/MedEye3d.jl/pull/12</a></p>
</section>
<section id="automatic-windowing-for-most-common-mri-and-pet-modalities" class="level2">
<h2 class="anchored" data-anchor-id="automatic-windowing-for-most-common-mri-and-pet-modalities">4. Automatic <a href="https://youtu.be/HaL-G43kwKA">windowing</a> for most common MRI and PET modalities</h2>
<p>Windowing is a crucial aspect of medical imaging, particularly in MRI (Magnetic Resonance Imaging) and PET (Positron Emission Tomography) modalities. It enables radiologists to enhance the contrast of images, highlighting specific features and improving the overall diagnostic accuracy. Windowing involves controlling the display range of pixel values to optimize the contrast between different tissues or structures. The display range is defined by two values: the minimum (min) and maximum (max) values that contribute to the final range of pixels that are displayed. By adjusting these values, radiologists can enhance or suppress specific features in the image, facilitating a more accurate diagnosis.</p>
<p>The <code>setTextureWindow</code> function utilizes a set of predefined keymap controls to simplify the windowing process. The F1-F7 keys are designated for controlling windowing in MRI and PET modalities. The keymap controls are as follows:</p>
<ul>
<li><p>F1: Display wide window for bone (CT) or increase minimum value for PET</p></li>
<li><p>F2: Display window for soft tissues (CT) or increase minimum value for PET</p></li>
<li><p>F3: Display wide window for lung viewing (CT) or increase minimum value for PET</p></li>
<li><p>F4: Decrease minimum value for display</p></li>
<li><p>F5: Increase minimum value for display</p></li>
<li><p>F6: Decrease maximum value for display</p></li>
<li><p>F7: Increase maximum value for display</p></li>
</ul>
<p>Implementation of <code>setTextureWindow</code> Function</p>
<p>The <code>setTextureWindow</code> function is designed to update the texture window settings based on the input keymap control. The function takes three arguments:</p>
<ul>
<li><code>activeTextur</code>: The current texture specification</li>
<li><code>stateObject</code>: The state data fields</li>
<li><code>windowControlStruct</code>: The window control structure containing the letter code for the keymap control</li>
</ul>
<p>The function performs the following steps:</p>
<ol type="1">
<li>Checks the letter code of the keymap control and updates the minimum and maximum values of the texture specification accordingly.</li>
<li>Updates the uniforms for the texture specification using the <code>controlMinMaxUniformVals</code> function.</li>
</ol>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setTextureWindow</span>(activeTextur<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">TextureSpec</span>, stateObject<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">StateDataFields</span>, windowControlStruct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">WindowControlStruct</span>)</span>
<span id="cb6-2">    activeTexturName <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> activeTextur.name</span>
<span id="cb6-3">    displayRange <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> activeTextur.minAndMaxValue[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> activeTextur.minAndMaxValue[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb6-4">    activeTexturStudyType <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> activeTextur.studyType</span>
<span id="cb6-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> windowControlStruct.letterCode <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"F1"</span></span>
<span id="cb6-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> activeTexturStudyType <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CT"</span></span>
<span id="cb6-7">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Bone windowing in CT</span></span>
<span id="cb6-8">            activeTextur.minAndMaxValue <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Float32</span>.([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>])</span>
<span id="cb6-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elseif</span> activeTexturStudyType <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PET"</span></span>
<span id="cb6-10">            activeTextur.minAndMaxValue[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.10</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> displayRange <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#windowing for pet, in the case of PET simply increase the minimum by 20% , doing the same in f1,f2 and f3</span></span>
<span id="cb6-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span>
<span id="cb6-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elseif</span> windowControlStruct.letterCode <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"F2"</span></span>
<span id="cb6-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> activeTexturStudyType <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CT"</span></span>
<span id="cb6-14">            activeTextur.minAndMaxValue <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Float32</span>.([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">350</span>])</span>
<span id="cb6-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elseif</span> activeTexturStudyType <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PET"</span></span>
<span id="cb6-16">            activeTextur.minAndMaxValue[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.10</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> displayRange</span>
<span id="cb6-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span>
<span id="cb6-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elseif</span> windowControlStruct.letterCode <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"F3"</span></span>
<span id="cb6-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> activeTexturStudyType <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CT"</span></span>
<span id="cb6-20">            activeTextur.minAndMaxValue <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Float32</span>.([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">426</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>])</span>
<span id="cb6-21">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elseif</span> activeTexturStudyType <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PET"</span></span>
<span id="cb6-22">            activeTextur.minAndMaxValue[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.10</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> displayRange</span>
<span id="cb6-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span>
<span id="cb6-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elseif</span> windowControlStruct.letterCode <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"F4"</span></span>
<span id="cb6-25">        activeTextur.minAndMaxValue[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.20</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> displayRange</span>
<span id="cb6-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elseif</span> windowControlStruct.letterCode <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"F5"</span></span>
<span id="cb6-27">        activeTextur.minAndMaxValue[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.20</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> displayRange</span>
<span id="cb6-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elseif</span> windowControlStruct.letterCode <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"F6"</span></span>
<span id="cb6-29">        activeTextur.minAndMaxValue[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.20</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> displayRange</span>
<span id="cb6-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elseif</span> windowControlStruct.letterCode <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"F7"</span></span>
<span id="cb6-31">        activeTextur.minAndMaxValue[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.20</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> displayRange</span>
<span id="cb6-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elseif</span> windowControlStruct.letterCode <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"F8"</span></span>
<span id="cb6-33">        activeTextur.uniforms.maskContribution <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.10</span></span>
<span id="cb6-34">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elseif</span> windowControlStruct.letterCode <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"F9"</span></span>
<span id="cb6-35">        activeTextur.uniforms.maskContribution <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.10</span></span>
<span id="cb6-36">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span>
<span id="cb6-37"></span>
<span id="cb6-38">    stateObject.mainForDisplayObjects.listOfTextSpecifications <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(texture <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> texture.name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> activeTexturName ? activeTextur <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> texture, stateObject.mainForDisplayObjects.listOfTextSpecifications)</span>
<span id="cb6-39">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coontrolMinMaxUniformVals</span>(activeTextur)</span>
<span id="cb6-40"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span></code></pre></div>
<blockquote class="blockquote">
<p>Bone windowing in CT</p>
</blockquote>
<p><img src="https://juliahealth.org/JuliaHealthBlog/posts/divyansh-gsoc/ct_windowing.png" class="img-fluid"></p>
<blockquote class="blockquote">
<p>Bone windowing in PET</p>
</blockquote>
<p><img src="https://juliahealth.org/JuliaHealthBlog/posts/divyansh-gsoc/pet_windowing.png" class="img-fluid"></p>
</section>
<section id="adding-support-for-multi-image-viewing-with-crosshair-marker-for-image-registration" class="level2">
<h2 class="anchored" data-anchor-id="adding-support-for-multi-image-viewing-with-crosshair-marker-for-image-registration">5. Adding support for multi-image viewing with crosshair marker for image registration</h2>
<p>Following the mid-term evaluation, MedEye3d.jl underwent a significant enhancement, whereby a multi-image display capability was implemented through a series of refinements. Specifically, a novel approach was adopted, whereby separate OpenGL <a href="https://www.khronos.org/opengl/wiki/Fragment_Shader">fragment shaders</a> were introduced to concurrently render images on either side of the visualizer, namely the left and right views. Prior to integrating voxel data into the fragment shaders, an initial series of tests involved evaluating individual colors to validate the integrity of the double image display. A screenshot from one of these critical testing phases is presented below: <img src="https://juliahealth.org/JuliaHealthBlog/posts/divyansh-gsoc/multi_fragment_shader.png" class="img-fluid"></p>
<p>The shaders were further manipulated to automatically initialize for each of the images separately. Further, the reactive aspect of the visualizer in multi-image display mode was iterated upon and now, instead of a single state management struct, a vector of states was being passed around, facilitating the user to scroll each of the images separately just by simply hovering their mouse over either of the image, activating its relevant associated state struct.</p>
<p>Down below, is the struct for state that handles all of the things currently related with an image:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb7-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">@with_kw</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">mutable struct</span> StateDataFields</span>
<span id="cb7-2">  currentDisplayedSlice<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># stores information what slice number we are currently displaying</span></span>
<span id="cb7-3">  mainForDisplayObjects<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">forDisplayObjects </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">forDisplayObjects</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># stores objects needed to  display using OpenGL and GLFW</span></span>
<span id="cb7-4">  onScrollData<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">FullScrollableDat </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">FullScrollableDat</span>()</span>
<span id="cb7-5">  textureToModifyVec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Vector{TextureSpec} </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># texture that we want currently to modify - if list is empty it means that we do not intend to modify any texture</span></span>
<span id="cb7-6">  isSliceChanged<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Bool </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">false</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set to true when slice is changed set to false when we start interacting with this slice - thanks to this we know that when we start drawing on one slice and change the slice the line would star a new on new slice</span></span>
<span id="cb7-7">  textDispObj<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">ForWordsDispStruct </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ForWordsDispStruct</span>()<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set of objects and constants needed for text diplay</span></span>
<span id="cb7-8">  currentlyDispDat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">SingleSliceDat </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SingleSliceDat</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># holds the data displayed or in case of scrollable data view for accessing it</span></span>
<span id="cb7-9">  calcDimsStruct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">CalcDimsStruct </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CalcDimsStruct</span>()   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#data for calculations of necessary constants needed to calculate window size , mouse position ...</span></span>
<span id="cb7-10">  valueForMasToSet<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">valueForMasToSetStruct </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">valueForMasToSetStruct</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># value that will be used to set  pixels where we would interact with mouse</span></span>
<span id="cb7-11">  lastRecordedMousePosition<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">CartesianIndex{3} </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CartesianIndex</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># last position of the mouse  related to right click - usefull to know onto which slice to change when dimensions of scroll change</span></span>
<span id="cb7-12">  forUndoVector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">AbstractArray </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># holds lambda functions that when invoked will  undo last operations</span></span>
<span id="cb7-13">  maxLengthOfForUndoVector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int64 </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># number controls how many step at maximum we can get back</span></span>
<span id="cb7-14">  fieldKeyboardStruct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">KeyboardStruct </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">KeyboardStruct</span>()</span>
<span id="cb7-15">  displayMode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">DisplayMode </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SingleImage</span>
<span id="cb7-16">  imagePosition<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int64 </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb7-17">  switchIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb7-18">  mainRectFields<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">GlShaderAndBufferFields </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GlShaderAndBufferFields</span>()</span>
<span id="cb7-19">  crosshairFields<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">GlShaderAndBufferFields </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GlShaderAndBufferFields</span>()</span>
<span id="cb7-20">  textFields<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">GlShaderAndBufferFields </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GlShaderAndBufferFields</span>()</span>
<span id="cb7-21">  spacingsValue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Union{Vector{Tuple{Float64,Float64,Float64}},Tuple{Float64,Float64,Float64}} </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>)]</span>
<span id="cb7-22">  originValue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Union{Vector{Tuple{Float64,Float64,Float64}},Tuple{Float64,Float64,Float64}} </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>)]</span>
<span id="cb7-23">  supervoxelFields<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">GlShaderAndBufferFields </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GlShaderAndBufferFields</span>()</span>
<span id="cb7-24"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span></code></pre></div>
<p>After the integrity of the fragment shaders was verified in multi-image, voxel data for the images was integrated and further modifications to the high-level functions were made and eventually the following script produced a rather appealing result.</p>
<p>Script for loading the same NIFTI image twice in the visualizer for side-by-side display:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb8-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">using</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">MedEye3d</span></span>
<span id="cb8-2">ctNiftiImage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/hurtbadly/Downloads/ct_soft_study.nii.gz"</span></span>
<span id="cb8-3">MedEye3d.SegmentationDisplay.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">displayImage</span>([[ctNiftiImage],[ctNifitImage]])</span></code></pre></div>
<blockquote class="blockquote">
<p>Results in :</p>
</blockquote>
<p><img src="https://juliahealth.org/JuliaHealthBlog/posts/divyansh-gsoc/multi_image_ct.png" class="img-fluid"></p>
<p>Crosshair marker for image registration are displayed in the relevant passive image to hightlight the same anatomical regions based on the spatial meta-data of the images i.e spacing, origin and direction. In order to achive the crosshair rendering in the passive image, the following action items were devised:</p>
<ol type="a">
<li><p>Retrieval of GLFW Mouse Callbacks for x and y position of the cursor in window coordinates (0 to window-width) from the active image</p></li>
<li><p>Conversion of these x and y window coordinates into their relevant active image x and y texture coordinates</p></li>
<li><p>Conversion of these texture coordinates into real space point with the help of spatial metadata</p></li>
<li><p>Conversion of the real space point into the texture coordinates of the passive image</p></li>
<li><p>Conversion of the passive image texture coordinates into their relevant OpenGL coordinate system values (-1 to 1)</p></li>
<li><p>Rendering of crosshair on OpenGL coordinate in passive image</p></li>
</ol>
<p>Conversion between different coordinate systems and accounting for the image‚Äôs spatial metadata during calculating proved to be challenging at first, but with multiple revisions, a final solution was achieved with seemingly no noticeable amount of lag or delay. One such frame of [CT] images with crosshair display in multi-image is depicted below:</p>
<p><img src="https://juliahealth.org/JuliaHealthBlog/posts/divyansh-gsoc/multi_image_ct_crosshair.png" class="img-fluid"></p>
<blockquote class="blockquote">
<p>Another frame from the openGL rendering cycle, highlighting PET images with crosshair display in multi-image mode:</p>
</blockquote>
<p><img src="https://juliahealth.org/JuliaHealthBlog/posts/divyansh-gsoc/pet_multi_image.png" class="img-fluid"></p>
</section>
<section id="adding-support-for-the-display-of-supervoxels-sv-with-borders-within-the-image-slices-to-better-understand-anatomical-regions-within-slices" class="level2">
<h2 class="anchored" data-anchor-id="adding-support-for-the-display-of-supervoxels-sv-with-borders-within-the-image-slices-to-better-understand-anatomical-regions-within-slices">6. Adding support for the display of <a href="https://doi.org/10.1016/j.cagd.2022.102080">SuperVoxels</a> sv with borders within the image slices to better understand anatomical regions within slices</h2>
<p>In enhancing MedEye3d‚Äôs functionality, supporting super voxels (sv) with boundaries becomes paramount. The sv rendering, effectively capturing gradients, serves as the cornerstone for detecting these boundaries within both MRI and PET volumes. Supervoxels, described either through indicator masks or meshes, encapsulate regions of interest with distinct image characteristics. By integrating boundary detection for super-voxels, MedEye3d can offer enhanced segmentation capabilities, enabling more precise delineation and analysis of anatomical structures and pathological regions within medical imaging data.</p>
<p><a href="https://www.sciencedirect.com/topics/computer-science/superpixel">Supervoxels</a> are basically a collection of voxels that share similar image properties. For example: in MRI scans of the brain cortex, super voxels could represent clusters of voxels corresponding to specific anatomical regions or functional areas. The main objective of this task was to add support for the display of super voxel-based segmentation of images, followed by some janitorial tasks:</p>
<ol type="1">
<li><p>Display of the borders of super-voxels (sv), extracted using the machine learning algorithms.</p></li>
<li><p>Checking image gradient agreement with super-voxel borders.</p></li>
</ol>
<p>This initial workflow involved, the initialization of relevant buffers in OpenGL for dynamic rendering of lines over the image display, namely vertex array buffers (vao), vertex buffers (vbo) and edge buffers (ebo). Further, these buffers are updated on a scroll event, where the information from the currently displayed slice is passed to the event handler, which invokes a function that updates the vertex buffer (vbo) with new vertices pertaining to the relevant slice number and planar view, precalculated from an <a href="https://www.neonscience.org/resources/learning-hub/tutorials/about-hdf5">HDF5</a> file during initialization of the visualizer. For instance, if the user is scrolling in the 3rd axis (transversal plane) and is currently on slice 40, the supervoxel display will pertain to edges specifically calculated for that specific slice in that plane.</p>
<p>Eventually, with ever so increasing number of attempts and a few hurdles along the way, one of which particularly stood out since it marked our first step towards a good direction:</p>
<blockquote class="blockquote">
<p>Challenges in rendering</p>
</blockquote>
<p><img src="https://juliahealth.org/JuliaHealthBlog/posts/divyansh-gsoc/supervoxel_rendering_issue.png" class="img-fluid"></p>
<p>At last, an appealing result hit our sight.</p>
<blockquote class="blockquote">
<p>Final result</p>
</blockquote>
<blockquote class="blockquote">
<p><em>Note:</em> The image borders are intentional to emphasize the size of the visualizer which is currently defaulted to a certain width and height.</p>
</blockquote>
<p><img src="https://juliahealth.org/JuliaHealthBlog/posts/divyansh-gsoc/supervoxel_rendering_fixed.png" class="img-fluid"></p>
<blockquote class="blockquote">
<p><em>Note:</em> However, There are a few things left to cover here, most of which revolve around MedImages.jl and documentation for the same. List of PRs that facilitated the completion of the tasks highlighted above:</p>
</blockquote>
<ol type="a">
<li><p><a href="https://github.com/JuliaHealth/MedEye3d.jl/pull/21">https://github.com/JuliaHealth/MedEye3d.jl/pull/21</a></p></li>
<li><p><a href="https://github.com/JuliaHealth/MedEye3d.jl/pull/20">https://github.com/JuliaHealth/MedEye3d.jl/pull/20</a></p></li>
<li><p><a href="https://github.com/JuliaHealth/MedEye3d.jl/pull/16">https://github.com/JuliaHealth/MedEye3d.jl/pull/16</a></p></li>
<li><p><a href="https://github.com/JuliaHealth/MedEye3d.jl/pull/14">https://github.com/JuliaHealth/MedEye3d.jl/pull/14</a></p></li>
<li><p><a href="https://github.com/JuliaHealth/MedEye3d.jl/pull/13">https://github.com/JuliaHealth/MedEye3d.jl/pull/13</a></p></li>
<li><p><a href="https://github.com/JuliaHealth/MedEye3d.jl/pull/12">https://github.com/JuliaHealth/MedEye3d.jl/pull/12</a></p></li>
</ol>
</section>
</section>
<section id="contributions-beyond-coding" class="level1">
<h1>Contributions Beyond Coding</h1>
<section id="mentoring-and-guidance" class="level2">
<h2 class="anchored" data-anchor-id="mentoring-and-guidance">1. Mentoring and Guidance</h2>
<p>I regularly organized meetings with my mentor to seek guidance on project direction and troubleshooting issues in the visualizer. This ensured that I stayed on track, received timely feedback, and addressed any challenges that arose.</p>
</section>
<section id="package-documentation-and-community-contribution" class="level2">
<h2 class="anchored" data-anchor-id="package-documentation-and-community-contribution">2. Package Documentation and Community Contribution</h2>
<p>I contributed to other medical imaging sub-ecosystem packages in JuliaHealth, including <a href="https://github.com/Juliahealth/MedImages.jl">MedImages.jl</a> and <a href="https://github.com/Juliahealth/MedEval3D.jl">MedEval3D.jl</a>. Specifically, I set up documentation for these packages using DocuementerVitepress.jl. This not only enhanced the functionality of these packages but also helped maintain a coherent and organized package ecosystem.</p>
</section>
<section id="multirepo-management-and-collaboration" class="level2">
<h2 class="anchored" data-anchor-id="multirepo-management-and-collaboration">3. Multirepo Management and Collaboration</h2>
<p>In addition to my work on the MedEye3d visualizer, I made significant contributions to other JuliaHealth repositories, including <a href="https://github.com/JuliaHealth/MedImages.jl">MedImages.jl</a> and worked over an <a href="https://github.com/InsightSoftwareConsortium/ITK">Insight Toolkit</a> wrapper library <a href="https://github.com/JuliaHealth/ITKIOWrapper.jl">ITKIOWrapper.jl</a> for support in image I/O down the road in MedImages.jl. I also maintained relevant documentation and ensured continuous collaboration and synchronization across these packages.</p>
</section>
</section>
<section id="conclusions-and-future-development" class="level1">
<h1>Conclusions and Future Development</h1>
<p>Within the scope of this 350-hour project, a comprehensive range of objectives were successfully addressed. Noteworthy achievements include:</p>
<ol type="1">
<li><p>Fixed screen tear and flicker within the visualizer. Integration of threadsafe Julia channels.</p></li>
<li><p>Achieved multi-image display over CT and PET modalities with crosshair rendering (Although, only one modality can be visualize at a time, i.e either CT | CT or PET | PET).</p></li>
<li><p>Achieved supervoxel display in single image display mode.</p></li>
<li><p>Achieved automatic windowing of MRI and PET most common modalities.</p></li>
</ol>
<p>Future work would include:</p>
<ul>
<li><p>Support for the users on Darwin (Apple-based platforms).</p></li>
<li><p>Apart from that, we would need to add a function that dynamically allocates the texture number to the manual modification mask, regardless of the number of images passed for display, which is currently defaulted to 2.</p></li>
<li><p>Also, in the future, we would explore the stretch goals a bit more rigorously, particularly the implementation of <a href="https://doi.org/10.1016/j.softx.2024.101744">MedVoxelHD</a> within MedEye3d.</p></li>
</ul>
</section>
<section id="acknowledgements" class="level1">
<h1>Acknowledgements üôá‚Äç‚ôÇÔ∏è</h1>
<ol type="1">
<li><p><a href="https://orcid.org/0000-0003-1823-6823">Jakub Mitura</a>: aka, <a href="https://github.com/jakubMitura14">Dr.&nbsp;Jakub Mitura</a></p></li>
<li><p><a href="https://scholar.google.com/citations?user=WzleS8YAAAAJ&amp;hl=en">Carlos Castillo Passi</a>: aka, <a href="https://github.com/cncastillo">cncastillo</a></p></li>
</ol>
<p>I would like to thank my mentor Dr.&nbsp;Jakub Mitura, for his help through out every phase of this project. The troubleshooting routines around problems would have rendered the project unsuccessful, if not for the support and guidance of my mentor throughout each part of this project. I would also like to thank Jacob Zelko, for leading the Juliahealth community with such vast expertise and leading efforts for engagement amongst the members through monthly meetings. My sincere gratitude towards your support, help and guidance through out the fellowship.</p>


<!-- -->


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a><div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body" data-entry-spacing="0">
<div id="ref-Mitura2021" class="csl-entry">
<div class="csl-left-margin">[1] </div><div class="csl-right-inline">J. Mitura and B. E. Chrapko, <span>‚Äú3D medical segmentation visualization in julia with MedEye3d,‚Äù</span> <em>Zeszyty Naukowe Warszawskiej Wy≈ºszej Szko≈Çy Informatyki</em>, vol. nr 25, pp. 57‚Äì67, 2021, doi: <a href="https://doi.org/10.26348/znwwsi.25.57">10.26348/znwwsi.25.57</a></div>
</div>
</div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{goyal2024,
  author = {Goyal, Divyansh},
  title = {GSoC ‚Äô24: {Adding} Functionalities to Medical Imaging
    Visualizations},
  date = {2024-11-01},
  url = {https://juliahealth.org/JuliaHealthBlog/posts/divyansh-gsoc/gsoc-2024-fellows.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-goyal2024" class="csl-entry quarto-appendix-citeas">
<div class="">D.
Goyal, <span>‚ÄúGSoC ‚Äô24: Adding functionalities to medical imaging
visualizations,‚Äù</span> Nov. 01, 2024. Available: <a href="https://juliahealth.org/JuliaHealthBlog/posts/divyansh-gsoc/gsoc-2024-fellows.html">https://juliahealth.org/JuliaHealthBlog/posts/divyansh-gsoc/gsoc-2024-fellows.html</a></div>
</div></div></section></div> ]]></description>
  <category>gsoc</category>
  <category>openGl</category>
  <category>imaging</category>
  <category>neuro</category>
  <guid>https://juliahealth.org/JuliaHealthBlog/posts/divyansh-gsoc/gsoc-2024-fellows.html</guid>
  <pubDate>Thu, 31 Oct 2024 18:30:00 GMT</pubDate>
</item>
<item>
  <title>GSoC Co-Mentoring Experience</title>
  <dc:creator>Mounika Thakkallapally</dc:creator>
  <link>https://juliahealth.org/JuliaHealthBlog/posts/mounika-gsoc-mentor/</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Hello üëã, I am Mounika. I am a Data Engineer at <a href="https://bcbi.brown.edu/">Brown Center for Biomedical Informatics</a>. This summer, I had the privilege of co-mentoring a talented student, <a href="https://www.linkedin.com/in/jay-landge-589439260/">Jay Sanjay</a> alongside <a href="https://jacobzelko.com">Jacob Zelko (@TheCedarPrince)</a> on a <a href="https://summerofcode.withgoogle.com/programs/2024/projects/ZXVIYAXG">project</a> for Google Summer of Code (aka <a href="https://summerofcode.withgoogle.com/">GSoC</a>). Here, I would like to share my experience as a co-mentor, offering insights for future mentors and students alike.</p>
<p>Before diving into my experience, let me provide some background on how it all started. At JuliaCon 2023, I had the chance to meet Jacob Zelko and have been following his work at <a href="https://juliahealth.org/">JuliaHealth</a> ever since. One day, I received a message from Jacob asking if I‚Äôd be interested in co-mentoring Jay for his GSoC project. Fortunately, I was already working on several projects at BCBI involving Julia programming, <a href="https://ohdsi.github.io/CommonDataModel/cdm54.html">OMOP CDM databases</a> and <a href="https://ohdsi.org/">OHDSI</a> tools, all of which were closely aligned with Jay‚Äôs project.</p>
<blockquote class="blockquote">
<p>Feel free to visit Jay‚Äôs work on <a href="https://github.com/JuliaHealth/OMOPCDMPathways.jl">OMOPCDMPathways.jl</a> or read about his <a href="https://juliahealth.org/JuliaHealthBlog/posts/jay-gsoc/gsoc-2024-fellows.html">fellowship experience from this post</a>.</p>
</blockquote>
</section>
<section id="mentor-mentee-relationship" class="level1">
<h1>Mentor-Mentee Relationship</h1>
<p>Jay, being a proactive student with a strong involvement in JuliaHealth, worked closely with Jacob to build a <a href="https://summerofcode.withgoogle.com/organizations/the-julia-language/projects/details/ZXVIYAXG">proposal for the project</a> several months before GSoC began this year. His early involvement and familiarity with the community set a solid foundation for the project. Jacob, with his extensive experience mentoring GSoC students over the years, brought invaluable insights not only for Jay but also for me, as I was just beginning my journey as a mentor.</p>
<p>Jacob established regular weekly Zoom meetings for the three of us to discuss Jay‚Äôs progress, review his accomplishments, and plan the next steps. During these meetings, I focused on taking detailed notes to ensure we stayed organized and up to date with all the tasks. We used <a href="https://trello.com/">Trello</a>, a project management tool, to track progress and manage project tasks efficiently. Additionally, we stayed connected thoughout the week via a dedicated slack channel for any ongoing discussions or questions (on the <a href="https://julialang.org/slack/#the_julia_language_slack">Julia Slack</a>).</p>
</section>
<section id="technical-discussion" class="level1">
<h1>Technical Discussion</h1>
<p>Jay‚Äôs project ‚ÄúDeveloping Tooling for Observational Health Research in Julia‚Äù was inspired by the <a href="https://www.sciencedirect.com/science/article/pii/S016926072200462X?via%3Dihub">TreatmentPatterns R package</a> <span class="citation" data-cites="markus2022treatmentpatterns">[1]</span>. The main goal of the project was to enhance observational research capabilities within the JuliaHealth ecosystem. To help Jay get started, <a href="https://github.com/JuliaHealth/OMOPCDMPathways.jl/issues?q=">Jacob created 10 to 15 GitHub issues</a>, each linked to a specific function that Jay planned to work on.</p>
<p>During our weekly meeting, we discussed the challenges Jay encountered, any roadblacks in his progress, and reviewed the pull requests he submitted on GitHub. These sessions allowed us to provide timely feedback and guide Jay through complex technical issues, ensuring steady progress throughout the project.</p>
</section>
<section id="learnings-and-observations" class="level1">
<h1>Learnings and Observations</h1>
<p>Jay‚Äôs proactive approach, steady progress, thoughtful questions, and clear focus on completing the project are qualities from which every student can benefit. His dedication to learning and problem-solving made a significant impact on the success of the project.</p>
<section id="tips-for-mentees" class="level2">
<h2 class="anchored" data-anchor-id="tips-for-mentees">Tips for Mentees</h2>
<p>From a mentee‚Äôs perspective having the following qualities would be helpful</p>
<ol type="1">
<li><p><strong>Stick to the proposal:</strong> While it‚Äôs natural to feel the urge explore new ideas beyond the original proposal, it‚Äôs essential to remain focused on the original proposal due to time constrains.</p></li>
<li><p><strong>Adaptability and open-mindedness:</strong> Be open to feedback and willing to adjust the tasks as you face challenges.</p></li>
<li><p><strong>Time Management:</strong> Many students juggle internships, interviews and other commitments during the summer. So it‚Äôs to manage time effectively and discuss with the mentor about the progress during those times.</p></li>
<li><p><strong>Effective communication:</strong> Stay up to date with any updates from GSoC or from the mentor. Keeping your mentor updated about your progress or any challenges helps build a collaborative and supportive mentor relationship.</p></li>
</ol>
</section>
<section id="tips-for-mentors" class="level2">
<h2 class="anchored" data-anchor-id="tips-for-mentors">Tips for Mentors</h2>
<p>On the other hand, Jacob demonstrated what it means to be an effective mentor. He showed me how to foster a supportive, collaborative relationship with the student. These are the lessons that I will carry forward in future mentorship roles:</p>
<p>From a mentor‚Äôs perspective having the following qualities would be helpful</p>
<ol type="1">
<li><p><strong>Clear communication:</strong> Communicating well in advance about the availability to meet or to review the work, having frequent meetings with the mentee would be helpful.</p></li>
<li><p><strong>Encouragement:</strong> While offering support, it‚Äôs important to encourage the mentee to take ownership of the project.</p></li>
<li><p><strong>Commitment and time:</strong> Mentoring GSoC is a voluntary role, often taken on in addition to regular professional work. Balancing GSoC with other work commitments requires effective time management and commitment.</p></li>
<li><p><strong>Structured Guidance:</strong> Providing a well-organized plan, such as using task management tools like Trello and GitHub issues, ensures that the mentee can follow a clear path towards success completion of the project.</p></li>
</ol>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Google Summer of Code offers an incredible opportunity for students to hone their programming skills while contributing to impactful open-source projects. It was a rewarding experience to be part of this journey as a co-mentor, and I am grateful to Jacob for giving me the chance to be involved in such a meaning project with the JuliaHealth community.</p>
<p>Through this experience, I not only gained insights into effective mentorship but also deepened my understanding of open-source collaboration and its potential to drive innovation in healthcare. I‚Äôm excited to explore further ways I can contribute to the JuliaHealth ecosystem and continue supporting the community.</p>
<section id="lets-keep-in-touch" class="level2">
<h2 class="anchored" data-anchor-id="lets-keep-in-touch">Let‚Äôs Keep in Touch!</h2>
<p>If you would like to know more about me, you can connect with me on <a href="https://www.linkedin.com/in/mounika-thakkallapally/">Linkedin</a>.</p>


<!-- -->


</section>
</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a><div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body" data-entry-spacing="0">
<div id="ref-markus2022treatmentpatterns" class="csl-entry">
<div class="csl-left-margin">[1] </div><div class="csl-right-inline">A. F. Markus, K. M. Verhamme, J. A. Kors, and P. R. Rijnbeek, <span>‚ÄúTreatmentPatterns: An r package to facilitate the standardized development and analysis of treatment patterns across disease domains,‚Äù</span> <em>Computer Methods and Programs in Biomedicine</em>, vol. 225, p. 107081, 2022.</div>
</div>
</div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{thakkallapally2024,
  author = {Thakkallapally, Mounika},
  title = {GSoC {Co-Mentoring} {Experience}},
  date = {2024-09-12},
  url = {https://juliahealth.org/JuliaHealthBlog/posts/mounika-gsoc-mentor/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-thakkallapally2024" class="csl-entry quarto-appendix-citeas">
<div class="">M.
Thakkallapally, <span>‚ÄúGSoC Co-Mentoring Experience,‚Äù</span> Sep. 12,
2024. Available: <a href="https://juliahealth.org/JuliaHealthBlog/posts/mounika-gsoc-mentor/">https://juliahealth.org/JuliaHealthBlog/posts/mounika-gsoc-mentor/</a></div>
</div></div></section></div> ]]></description>
  <category>gsoc</category>
  <category>mentor</category>
  <category>experience</category>
  <guid>https://juliahealth.org/JuliaHealthBlog/posts/mounika-gsoc-mentor/</guid>
  <pubDate>Wed, 11 Sep 2024 18:30:00 GMT</pubDate>
</item>
<item>
  <title>GSoC ‚Äô24: Developing Tooling for Observational Health Research in Julia</title>
  <dc:creator>Jay Sanjay Landge</dc:creator>
  <link>https://juliahealth.org/JuliaHealthBlog/posts/jay-gsoc/gsoc-2024-fellows.html</link>
  <description><![CDATA[ 




<section id="hi-everyone" class="level1">
<h1>Hi Everyone! üëã</h1>
<p>I am Jay Sanjay, and I am pursuing a Bachelor‚Äôs degree in Computational Sciences and Engineering at the Indian Institute of Technology (IIT) in Hyderabad, India. Coming from a mathematics and data analysis background, I was initially introduced to Julia at my university lectures. Later, I delved more into the language and the JuliaHealth community - an intersection of Julia, Health Research, Data Sciences, and Informatics. Here, I met some of the great folks in JuliaHealth and I decided to take it on as a full-fledged summer project. In this blog, I will briefly describe what my project is and what I did as a part of it.</p>
<ol type="1">
<li><p>You can find my <a href="https://summerofcode.withgoogle.com/archive/2024/projects/ZXVIYAXG"><strong>GSoC project archive link</strong></a></p></li>
<li><p>You can also find the related publication of my work on <a href="https://zenodo.org/records/14674051"><strong>Zenodo</strong></a></p></li>
<li><p>If you want to know more about me, you can connect with me on <a href="https://www.linkedin.com/in/jay-landge-589439260/"><strong>LinkedIn</strong></a> and follow me on <a href="https://github.com/Jay-sanjay"><strong>GitHub</strong></a></p></li>
</ol>
</section>
<section id="background" class="level1">
<h1>Background</h1>
<section id="what-is-observational-health-research" class="level2">
<h2 class="anchored" data-anchor-id="what-is-observational-health-research">What Is Observational Health Research?</h2>
<p>Observational Health Research refers to studies that analyze real-world data (such as patient medical claims, electronic health records, etc.) to understand patient health. These studies often encompass a vast amount of data concerning patient care. An outstanding challenge here is that these datasets can become very complex and grow large enough to require advanced computing methods to process this information.</p>
</section>
<section id="what-are-patient-pathways" class="level2">
<h2 class="anchored" data-anchor-id="what-are-patient-pathways">What Are Patient Pathways?</h2>
<p>Patient pathways refer to the journey that patients with specific medical conditions undergo in terms of their treatment. This concept goes beyond simple drug uptake statistics and looks at the sequence of treatments patients receive over time, including first-line treatments and subsequent therapies. Understanding patient pathways is essential for analyzing treatment patterns, adherence to clinical guidelines, and the disbursement of drugs. To analyze patient pathways, one would typically use real-world data from sources such as electronic health records, claims data, and registries. However, barriers such as data interoperability and resource requirements have hindered the full utilization of real-world data for this purpose.</p>
<p>So to address these challenges we (the JuliaHealth organization and I) want to develop a set of tools to extract and analyze these patient pathways. These sets of tools are based on the Observational Medical Outcomes Partnership (OMOP) Common Data Model, which standardizes healthcare data to promote interoperability.</p>
</section>
</section>
<section id="project-description" class="level1">
<h1>Project Description</h1>
<p>As part of this project with JuliaHealth, I developed a new package called <a href="https://github.com/JuliaHealth/OMOPCDMPathways.jl"><strong>OMOPCDMPathways.jl</strong></a>. This package is designed for deployment in research projects, particularly those related to health and medical data analysis. This project takes much inspiration from the paper <a href="https://www.sciencedirect.com/science/article/pii/S016926072200462X?via%3Dihub"><em>TreatmentPatterns: An r package to facilitate the standardized development and analysis of treatment patterns across disease domains</em></a> <span class="citation" data-cites="markus2022treatmentpatterns">[1]</span> and explores the implementation of some of those ideas to develop new tools within the JuliaHealth Observational Health Subecosystem for exploring patient pathways. Additional new features and approaches were added and explored within this project. Additionally, I have authored a developer guide for the package, providing instructions on its use and contribution. This project provided me with hands-on experience in developing production-level code and exposed me to open-source software development practices. I had the opportunity to work in a team, under my mentors, and ensured the integration of the package with the rest of JuliaHealth, facilitating its adoption and usability within the community.</p>
</section>
<section id="project-goals" class="level1">
<h1>Project Goals</h1>
<p>As a part of the development, I was majorly engaged in crafting the following functionalities:</p>
<ol type="1">
<li><p>Selecting treatments of interest: The first decision that was made was to decide the time from which the desired treatments of interest should be included in the treatment pathway study. Here the <a href="https://github.com/JuliaHealth/OMOPCDMPathways.jl/issues/1">periodPriorToIndex</a> specifies the period (i.e.&nbsp;number of days) before the index date from which treatments should be included.</p></li>
<li><p>Find Treatment History of Patients: Create the <a href="https://github.com/JuliaHealth/OMOPCDMPathways.jl/issues/4">treatment history</a> of a patient based on target, event, and exit cohorts. Then filter patient events based on the start and end dates of the target cohort. Third, Calculate the duration of treatment eras and the gap between treatments.</p></li>
<li><p>Filters: Filter the treatment history based on the <a href="https://github.com/JuliaHealth/OMOPCDMPathways.jl/issues/5">minEraDuration</a> parameter and <a href="https://github.com/JuliaHealth/OMOPCDMPathways.jl/issues/2">EraCollapse</a> parameter.</p></li>
<li><p>Create a Continuous Integration and Continuous Development pipeline for the package.</p></li>
<li><p>Implement the combinationWindow function, which combines treatments with various overlapping strategies.</p></li>
</ol>
<p>Additionally, we had a few stretch goals which were:</p>
<ol type="1">
<li><p>Composing with JuliaStats Ecosystem</p></li>
<li><p>Novel Visualizations for Pathways</p></li>
</ol>
</section>
<section id="tasks" class="level1">
<h1>Tasks</h1>
<section id="setting-up-the-package-in-juliahealth-channel" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-the-package-in-juliahealth-channel">1. Setting Up the Package in JuliaHealth Channel</h2>
<p>Initially, there was no package as such for generating pathways, so I had to build it from scratch. First, I created the repository with the name <a href="https://github.com/JuliaHealth/OMOPCDMPathways.jl">OMOPCDMPathways.jl</a>. Once the repository was created, we needed to have a skeleton for a standard Julia repository. For this, we used the <a href="https://juliaci.github.io/PkgTemplates.jl/stable/user/">PkgTemplates.jl</a> this provided a basic skeleton for the repository that included - folders for test suites, documentation, src code files, GitHub files, README and LICENSE file, TOML and citation files. All this we can further edit and modify as per our work. By default, PkgTemplate.jl uses <a href="https://documenter.juliadocs.org/stable/">Documenter.jl</a> for the documentation part but as suggested and discussed with my mentor we decided to shift to <a href="https://luxdl.github.io/DocumenterVitepress.jl/dev/">DocumenterVitepress.jl</a> for the documentation part. However, we still faced some deployment issues in the new documentation due to a few mistakes in the <code>make.jl</code> file, thanks to <a href="https://github.com/asinghvi17">Anshul Singhvi</a> for helping fix the <a href="https://github.com/JuliaHealth/OMOPCDMPathways.jl/issues/15">Deployment issues with DocumenterVitepress</a>. With this, we were ready with the documentation set up and fully functional. After we had shifted to DocumenterVitepress the main task now was to host the documentation, this was done using Github-Actions, detailed steps for hosting are provided at <a href="https://documenter.juliadocs.org/stable/man/hosting/#Hosting-Documentation">this</a> page. Then we added the CodeCov to our package by triggering it via a dummy function and a corresponding test case for it. Also, the CI for the package was set up with it. And, now finally the repository was ready with test coverage, CI, and documentation fully functional repository ready. Here‚Äôs some snapshots of the documentation set-up:</p>
<p><img src="https://juliahealth.org/JuliaHealthBlog/posts/jay-gsoc/image.png" class="img-fluid"></p>
<blockquote class="blockquote">
<p>Initial documentation with Documenter.jl</p>
</blockquote>
<p><img src="https://juliahealth.org/JuliaHealthBlog/posts/jay-gsoc/img2.png" class="img-fluid"></p>
<blockquote class="blockquote">
<p>New documentation using DocumenterVitepress.jl</p>
</blockquote>
<p>So, as a part of it, I created this <a href="https://luxdl.github.io/DocumenterVitepress.jl/dev/documenter_to_vitepress_docs_example">documentation</a> which provides detailed steps for converting docs from Documenter to DocumenterVitepress.</p>
</section>
<section id="loading-the-postgresql-database" class="level2">
<h2 class="anchored" data-anchor-id="loading-the-postgresql-database">2. Loading the PostgreSQL Database</h2>
<p>The main database we worked on/built analysis was the freely available OMOPCDM Database. The Database was formatted within a PostgreSQL database with <a href="https://www.devart.com/dbforge/postgresql/how-to-install-postgresql-on-linux/">installation instructions here</a> are some instructions on how to set up Postgres in a Linux machine. However, I was provided with some more extra synthetic data from my mentor for further testing of the functionalities. Being a very large database we had to strategically download it further, my mentor helped me in setting up the Postgres on my local machine. Once, the database was set up proper testing was performed on it to check if things were as expected. With this, we were done with the database setup as well and could finally dive into the actual code logic for the Pathways synthesis.</p>
</section>
<section id="testing-and-development-setup-on-my-local-computer" class="level2">
<h2 class="anchored" data-anchor-id="testing-and-development-setup-on-my-local-computer">3. Testing and Development setup on my local computer</h2>
<p>To get a proper environment for functionality creation and concurrent testing we required a proper testing setup so that we could test the new functions made at the same time. This was done using <a href="https://timholy.github.io/Revise.jl/stable/">Revise.jl</a>, which helps to keep Julia sessions running without frequent restarts when making changes to code. It allowed me to edit my code, update packages, or switch git branches during a session, with changes applied immediately in the next command. My mentor helped me set it up, added Revise.jl to the global Julia environment, also <a href="https://github.com/GunnarFarneback/PackageCompatUI.jl">PackageCompatUI</a> that provides a terminal text interface to the [compat] section of a Julia Project.toml file, and finally made a Julia script by the name ‚Äústartup.jl‚Äù out of it. This script was then added to <code>/home/jay-sanjay/.julia/config/</code> path in my local computer.</p>
<p>Here is the sample for the startup.jl file:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">using</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">PackageCompatUI</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">using</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">PkgTemplates</span></span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">using</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Revise</span></span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">###################################</span></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># HELPER FUNCTIONS</span></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">###################################</span></span>
<span id="cb1-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">template</span>()</span>
<span id="cb1-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Template</span>(;</span>
<span id="cb1-10">        user<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"jay-sanjay"</span>,</span>
<span id="cb1-11">        dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/FOSS"</span>,</span>
<span id="cb1-12">        authors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"jaysanjay &lt;jaysanjay@gmail.com&gt; and contributors"</span>,</span>
<span id="cb1-13">        julia<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">v"1.6"</span>,</span>
<span id="cb1-14">        plugins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb1-15">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ProjectFile</span>(; version<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">v"0.0.1"</span>),</span>
<span id="cb1-16">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Git</span>(),</span>
<span id="cb1-17">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Readme</span>(),</span>
<span id="cb1-18">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">License</span>(; name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MIT"</span>),</span>
<span id="cb1-19">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GitHubActions</span>(; extra_versions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1.6"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nightly"</span>]),</span>
<span id="cb1-20">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">TagBot</span>(),</span>
<span id="cb1-21">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Codecov</span>(),</span>
<span id="cb1-22">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Documenter</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">{GitHubActions}</span>(),</span>
<span id="cb1-23">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Citation</span>(; readme <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">true</span>),</span>
<span id="cb1-24">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">RegisterAction</span>(),</span>
<span id="cb1-25">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">BlueStyleBadge</span>(),</span>
<span id="cb1-26">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Formatter</span>(;style <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>)</span>
<span id="cb1-27">        ],</span>
<span id="cb1-28">    )</span>
<span id="cb1-29"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span></code></pre></div>
</section>
<section id="selecting-treatments-of-interest" class="level2">
<h2 class="anchored" data-anchor-id="selecting-treatments-of-interest">4. Selecting Treatments of Interest</h2>
<p>So, as a part of this, we used the previously mentioned research paper and discussion with the mentors we came up with logic for it. The first thing to do was to determine the moment in time from which selected treatments of interest should be included in the treatment pathway. The default is all treatments starting after the index date of the target cohort. For example, for a target cohort consisting of newly diagnosed patients, treatments after the moment of first diagnosis are included. However, it would also be desirable to include (some) treatments before the index date, for instance in case a specific disease diagnosis is only confirmed after initiating treatment. Therefore, periodPriorToIndex specifies the period (i.e.&nbsp;number of days) before the index date from which treatments should be included. We have created two dispatches for this function. After that proper testing and documentation are also added.</p>
<p>A basic implementation for it is:</p>
<ol type="1">
<li><p>Construct a SQL query to select cohort_definition_id, subject_id, and cohort_start_date from a specified table, filtering by cohort_id.</p></li>
<li><p>The SQL query construction and execution was done using the <a href="https://mechanicalrabbit.github.io/FunSQL.jl/stable/">FunSQL.jl</a> library, in the below-shown manner:</p></li>
</ol>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb2-1">sql <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">From</span>(tab) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-2">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Where</span>(Fun.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">in</span>(Get.cohort_definition_id, cohort_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span>)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-3">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Select</span>(Get.cohort_definition_id, Get.subject_id, Get.cohort_start_date) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-4">            q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">render</span>(q, dialect<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dialect)</span></code></pre></div>
<ol start="3" type="1">
<li><p>Executes the constructed SQL query using a database connection, fetching the results into a data frame.</p></li>
<li><p>If the DataFrame is not empty, convert cohort_start_date to DateTime and subtract date_prior from each date, then return the modified DataFrame.</p></li>
</ol>
<p>This was then be called this:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">period_prior_to_index</span>(</span>
<span id="cb3-2">        cohort_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], </span>
<span id="cb3-3">        conn; </span>
<span id="cb3-4">        date_prior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Day</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>), </span>
<span id="cb3-5">        tab<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cohort</span>
<span id="cb3-6">    )</span></code></pre></div>
</section>
<section id="filters-applied" class="level2">
<h2 class="anchored" data-anchor-id="filters-applied">5. Filters Applied</h2>
<p>After this, we where needed to get the patient‚Äôs database filtered more finely so that there are minimal variations that can be ignored. The duration of the above extracted event eras may vary a lot and it can be preferable to limit to only treatments exceeding a minimum duration. Hence, minEraDuration speciÔ¨Åes the minimum time an event era should last to be included in the analysis. All these implementations were more of Dataframe manipulation where I used <a href="https://dataframes.juliadata.org/stable/">DataFrames.jl</a> package.</p>
<p>After that proper testing and documentation are also added.</p>
<p>A basic implementation for the minEraDuration is: It filters the treatment history <code>DataFrame</code> to retain only those rows where the duration between <code>drug_exposure_end</code> and <code>drug_exposure_start</code> is at least <code>minEraDuration</code>. This function can be used as follows:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| eval: false </span></span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">calculate_era_duration</span>(test_df, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">920000</span>)</span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#= ... =#</span></span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">√ó</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> DataFrame</span>
<span id="cb4-8"> Row ‚îÇ person_id  drug_exposure_start  drug_exposure_end </span>
<span id="cb4-9">     ‚îÇ <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int64</span>      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Float64</span>              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int64</span>             </span>
<span id="cb4-10">‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</span>
<span id="cb4-11">   <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> ‚îÇ         <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>           <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.7273e8</span>          <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">364953600</span></span>
<span id="cb4-12">   <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> ‚îÇ         <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>            <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.90304e7</span>           <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">31449600</span></span>
<span id="cb4-13">   <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> ‚îÇ         <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>           <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">8.18208e7</span>          <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">80006400</span></span>
<span id="cb4-14">   <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> ‚îÇ         <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>            <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.32918e9</span>         <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1330387200</span></span></code></pre></div>
<p>Another filter we worked on is the EraCollapse. So, let‚Äôs suppose a case where an individual receives the same treatment for a long period of time (e.g.&nbsp;need for chronic treatment). Then it‚Äôs highly likely that the person would require refills. Now as patients are not 100% adherent, there might be a gap between two subsequent event eras. Usually, these eras are still considered as one treatment episode, and the eraCollapseSize deals with the maximum gap within which two eras of the same event cohort would be collapsed into one era (i.e.&nbsp;seen as a continuous treatment instead of a stop and re-initiation of the same treatment). After that proper testing and documentation are also added.</p>
<p>A basic implementation for the eraCollapseSize is: (a) Sorts the data frame by event_start_date and event_end_date. (b) Calculates the gap between each era and the previous era. (c) Filters out rows with gap_same &gt; eraCollapseSize.</p>
<p>These functions can be used as follows:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| eval: false </span></span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#= ... =#</span></span>
<span id="cb5-4"></span>
<span id="cb5-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">EraCollapse</span>(treatment_history <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_df, eraCollapseSize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">400000000</span>)</span>
<span id="cb5-6"><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">√ó</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> DataFrame</span>
<span id="cb5-7"> Row ‚îÇ person_id  drug_exposure_start  drug_exposure_end  gap_same   </span>
<span id="cb5-8">     ‚îÇ <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int64</span>      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Float64</span>              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int64</span>              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Float64</span>    </span>
<span id="cb5-9">‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</span>
<span id="cb5-10">   <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> ‚îÇ         <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>           <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.33347e8</span>         <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">532483200</span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.86373e9</span></span>
<span id="cb5-11">   <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> ‚îÇ         <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>           <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.7273e8</span>          <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">364953600</span>   <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.59754e8</span></span>
<span id="cb5-12">   <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> ‚îÇ         <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>           <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">8.18208e7</span>          <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">80006400</span>   <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.83133e8</span></span>
<span id="cb5-13">   <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> ‚îÇ         <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>            <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.90304e7</span>           <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">31449600</span>   <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.09037e8</span></span></code></pre></div>
</section>
<section id="treatment-history-of-the-patients" class="level2">
<h2 class="anchored" data-anchor-id="treatment-history-of-the-patients">6. Treatment History of the Patients</h2>
<p>The <code>create_treatment_history</code> function constructs a detailed treatment history for patients in a target cohort by processing and filtering event cohort data from a given DataFrame. It begins by isolating the target cohort based on its <code>cohort_id</code>, adding a new column for the <code>index_year</code> derived from the cohort‚Äôs start date. Then, it selects relevant event cohorts based on a provided list of cohort IDs and merges them with the target cohort on the <code>subject_id</code> to associate events with individuals in the target group. The function applies different filtering criteria depending on whether the user is interested in treatments starting or ending within a specified period before the target cohort‚Äôs start date (defined by <code>periodPriorToIndex</code>). It keeps only the event cohorts that match the filtering condition, ensuring that only relevant treatments are considered. After filtering, the function calculates time gaps between consecutive cohort events for each patient, adding these gaps to the DataFrame. The final DataFrame provides a history of treatments, including the dates of events and the time intervals between them, offering a clear timeline of treatment for each patient. After that proper testing and documentation are also added.</p>
</section>
<section id="combinationwindow-functionality-to-combine-overlapping-treatments" class="level2">
<h2 class="anchored" data-anchor-id="combinationwindow-functionality-to-combine-overlapping-treatments">7. CombinationWindow Functionality To Combine Overlapping Treatments</h2>
<p>Now once we have the filtering of the treatments done, we need to combine the overlapping treatments based on some set of rules. The combinationWindow specifies the time that two event eras need to overlap to be considered a combination treatment. If there are more than two overlapping event eras, we sequentially combine treatments, starting from the Ô¨Årst two overlapping event eras.</p>
<p>The <code>combination_Window</code> function processes a patient‚Äôs treatment history by identifying overlapping treatment events and combining them into continuous treatment periods based on certain rules. It first converts <code>event_cohort_id</code> into strings and sorts the treatment data by <code>person_id</code>, <code>event_start_date</code>, and <code>event_end_date</code>. The helper function <code>selectRowsCombinationWindow</code> calculates gaps between consecutive treatments, marking rows where treatments overlap or occur too closely. In the main loop, the function checks these overlaps and gaps against a specified <code>combinationWindow</code>. If treatments overlap (or nearly overlap), the function adjusts the treatment periods by either merging adjacent rows or splitting rows to create continuous treatment periods. The process continues until all overlapping treatments are combined into one, creating an updated and accurate treatment history. The function ensures the final output reflects realistic treatment windows by handling special cases where gaps between treatments are smaller than the treatment durations themselves.</p>
<p>It mainly covers the three cases mentioned in the R-research paper:</p>
<section id="switch-case" class="level3">
<h3 class="anchored" data-anchor-id="switch-case">Switch Case:</h3>
<p><em>Condition</em>: If the gap between the two treatment events is smaller than the combinationWindow, but the gap is not equal to the duration of either event. <em>Action</em>: The event_end_date of the previous treatment is set to the event_start_date of the current treatment. This effectively ‚Äúshifts‚Äù the previous treatment‚Äôs end date to eliminate the gap, merging the treatments into one continuous period. <em>Purpose</em>: This ensures that treatment gaps that are too small (less than combinationWindow) are treated as part of the same treatment window.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| eval: false </span></span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#= ... =#</span></span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>gap_previous <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> combinationWindow <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> !(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>gap_previous <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [duration_era, prev_duration_era])</span>
<span id="cb6-6">    treatment_history[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>event_end_date] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> treatment_history[i, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>event_start_date]</span></code></pre></div>
<p>Here is the pictorial representation for the same: <img src="https://juliahealth.org/JuliaHealthBlog/posts/jay-gsoc/case1.png" class="img-fluid"></p>
</section>
<section id="frfs-first-row-first-shortened" class="level3">
<h3 class="anchored" data-anchor-id="frfs-first-row-first-shortened">FRFS (First Row, First Shortened):</h3>
<p><em>Condition</em>: If the gap is larger than or equal to the combinationWindow, or the gap equals the duration of one of the two treatments, and the first treatment ends before or on the same date as the second treatment. <em>Action</em>: A new row is created where the second treatment‚Äôs event_end_date is set to the end date of the first treatment. This preserves the overlap but ensures that the earlier treatment period stays intact. <em>Purpose</em>: This prevents unnecessary truncation of the first treatment if it spans the entire overlap window.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| eval: false </span></span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#= ... =#</span></span>
<span id="cb7-4"></span>
<span id="cb7-5">elseif <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>gap_previous <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> combinationWindow <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>gap_previous <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [duration_era, prev_duration_era]</span>
<span id="cb7-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> treatment_history[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>event_end_date] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> treatment_history[i, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>event_end_date]</span>
<span id="cb7-7">        new_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">deepcopy</span>(treatment_history[i, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>])</span>
<span id="cb7-8">        new_row.event_end_date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> treatment_history[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>event_end_date]</span>
<span id="cb7-9">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">append!</span>(treatment_history, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DataFrame</span>(new_row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'</span>))</span></code></pre></div>
<p>Here is the pictorial representation for the same: <img src="https://juliahealth.org/JuliaHealthBlog/posts/jay-gsoc/case2.png" class="img-fluid"></p>
</section>
<section id="lrfs-last-row-first-shortened" class="level3">
<h3 class="anchored" data-anchor-id="lrfs-last-row-first-shortened">LRFS (Last Row, First Shortened):</h3>
<p><em>Condition</em>: If the gap is larger than or equal to the combinationWindow, or the gap equals the duration of one of the treatments, and the first treatment ends after the second treatment. <em>Action</em>: The current treatment‚Äôs event_end_date is adjusted to match the event_end_date of the previous treatment. <em>Purpose</em>: This handles cases where the second treatment‚Äôs window should be shortened to prevent overlap with the previous treatment, merging them into a single continuous window.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| eval: false </span></span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#= ... =#</span></span>
<span id="cb8-4"></span>
<span id="cb8-5">else</span>
<span id="cb8-6">    treatment_history[i, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>event_end_date] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> treatment_history[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>event_end_date]</span></code></pre></div>
<p>Here is the pictorial representation for the same: <img src="https://juliahealth.org/JuliaHealthBlog/posts/jay-gsoc/case3.png" class="img-fluid"></p>
<blockquote class="blockquote">
<p><em>Note:</em> However, There are a few things left to cover here, most of which are the documentation and writing the test suite for the same.</p>
</blockquote>
</section>
</section>
</section>
<section id="contributions-beyond-coding" class="level1">
<h1>Contributions Beyond Coding</h1>
<section id="organizing-meetings-and-communication" class="level2">
<h2 class="anchored" data-anchor-id="organizing-meetings-and-communication">1. Organizing Meetings and Communication</h2>
<p>Throughout the project, I regularly met with my mentor, [Jacob Zelko], and co-mentor, [Mounika], via weekly Zoom calls to discuss progress and seek guidance. During these meetings, we reviewed my work, identified areas where I needed help, and set clear goals for the upcoming weeks. We used Trello to organize and track these goals, ensuring that nothing was overlooked. My mentors provided detailed insights into specific technical aspects and guided me through the logic behind various functions. Outside of our scheduled meetings, they were always available for quick queries via Slack, ensuring constant support.</p>
</section>
<section id="personal-documentation" class="level2">
<h2 class="anchored" data-anchor-id="personal-documentation">2. Personal Documentation</h2>
<p>In addition to the notes from our meetings, I maintained personal documentation where I recorded every step I took, including the challenges I faced and the mistakes I made. This helped me reflect on my progress and stay organized throughout the fellowship. Following my selection for GSoC 2024, I also published a blog post on <a href="https://medium.com/@landgejay124/gsoc-24-the-julia-language-62b809bbec49">Medium</a> to share my journey and experiences with the Julia Language community.</p>
</section>
<section id="contributions-to-the-rest-of-the-juliahealth-repositories" class="level2">
<h2 class="anchored" data-anchor-id="contributions-to-the-rest-of-the-juliahealth-repositories">3. Contributions To the Rest of the JuliaHealth Repositories</h2>
<p>Earlier I have contributed a lot to the <a href="https://github.com/JuliaHealth/OMOPCDMCohortCreator.jl">OMOPCDMCohortCreator.jl</a> including adding new functionalities writing test suites, adding blogs including - <a href="https://github.com/JuliaHealth/juliahealth.github.io/pull/124">Patient Pathways within JuliaHealth</a>. Apart from that I also initiated 3 new releases of this package.</p>
</section>
</section>
<section id="conclusions-and-future-development" class="level1">
<h1>Conclusions and Future Development</h1>
<p>This project was a 350-hour large project since there were many goals to accomplish. Here is what we accomplished:</p>
<ol type="1">
<li><p>Built a new repository in JuliaHealth land dedicated especially to treatment pathways synthesis.</p></li>
<li><p>CI/CD for the Package and Documentation hosting.</p></li>
<li><p>All required basic functionalities required to build the pathways.</p></li>
<li><p>Documentation and test suites added for each.</p></li>
</ol>
<p>Future work would include:</p>
<ul>
<li><p>Finish this <a href="https://github.com/JuliaHealth/OMOPCDMPathways.jl/pull/63">PR</a> test-suites and documentation are remaining for this PR.</p></li>
<li><p>Apart from that, we would need to add a <a href="https://github.com/JuliaHealth/OMOPCDMPathways.jl/issues/9">function</a> that sews up all the functionalities of the package so that the user can run the complete pathways analysis by running just one function instead of running each of the functions manually.</p></li>
<li><p>Also, in the future, we would explore what statistical functionalities we would need to further explore pathways.</p></li>
<li><p>Then, we could explore how to compose JuliaHealth with packages from ecosystems like <a href="https://juliastats.org/">JuliaStats</a> and <a href="https://docs.juliadsp.org/stable/contents/">JuliaDSP</a> (for time series analysis) that are mentioned in this <a href="https://github.com/JuliaHealth/OMOPCDMPathways.jl/issues/8">PR</a>.</p></li>
<li><p>And finally work on creating novel visualizations for the Pathways. Commonly used visualizations for treatment pathways (such as sunburst or icicle plots) showing which patients fall under what treatment pathways could be developed as plotting recipes to visualize various aspects of a patient‚Äôs care pathway rapidly.</p></li>
</ul>
</section>
<section id="acknowledgements" class="level1">
<h1>Acknowledgements üôá‚Äç‚ôÇÔ∏è</h1>
<ol type="1">
<li><p><a href="https://jacobzelko.com">Jacob S. Zelko</a>: aka, <a href="https://github.com/TheCedarPrince">TheCedarPrince</a></p></li>
<li><p><a href="https://www.linkedin.com/in/mounika-thakkallapally/">Mounika Thakkallapally</a></p></li>
</ol>
<p>Thank you for your continuous help and support throughout the fellowship. <em>Note: This blog post was also written with the assistance of LLM technologies to help with grammar, flow, and spelling!</em></p>


<!-- -->


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a><div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body" data-entry-spacing="0">
<div id="ref-markus2022treatmentpatterns" class="csl-entry">
<div class="csl-left-margin">[1] </div><div class="csl-right-inline">A. F. Markus, K. M. Verhamme, J. A. Kors, and P. R. Rijnbeek, <span>‚ÄúTreatmentPatterns: An r package to facilitate the standardized development and analysis of treatment patterns across disease domains,‚Äù</span> <em>Computer Methods and Programs in Biomedicine</em>, vol. 225, p. 107081, 2022.</div>
</div>
</div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{sanjay_landge2024,
  author = {Sanjay Landge, Jay},
  title = {GSoC ‚Äô24: {Developing} {Tooling} for {Observational} {Health}
    {Research} in {Julia}},
  date = {2024-09-07},
  url = {https://juliahealth.org/JuliaHealthBlog/posts/jay-gsoc/gsoc-2024-fellows.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-sanjay_landge2024" class="csl-entry quarto-appendix-citeas">
<div class="">J.
Sanjay Landge, <span>‚ÄúGSoC ‚Äô24: Developing Tooling for Observational
Health Research in Julia,‚Äù</span> Sep. 07, 2024. Available: <a href="https://juliahealth.org/JuliaHealthBlog/posts/jay-gsoc/gsoc-2024-fellows.html">https://juliahealth.org/JuliaHealthBlog/posts/jay-gsoc/gsoc-2024-fellows.html</a></div>
</div></div></section></div> ]]></description>
  <category>gsoc</category>
  <category>sql</category>
  <category>observational health</category>
  <category>analysis</category>
  <guid>https://juliahealth.org/JuliaHealthBlog/posts/jay-gsoc/gsoc-2024-fellows.html</guid>
  <pubDate>Fri, 06 Sep 2024 18:30:00 GMT</pubDate>
</item>
<item>
  <title>GSoC ‚Äô24: Enhancements to KomaMRI.jl GPU Support</title>
  <dc:creator>Ryan Kierulf</dc:creator>
  <link>https://juliahealth.org/JuliaHealthBlog/posts/ryan-gsoc/Ryan_GSOC.html</link>
  <description><![CDATA[ 




<section id="hi" class="level1">
<h1>Hi! üëã</h1>
<p>I am Ryan, an MS student currently studying computer science at the University of Wisconsin-Madison. Looking for a project to work on this summer, my interest in high-performance computing and affinity for the Julia programming language drew me to Google Summer of Code, where I learned about this project opportunity to work on enhancing GPU support for KomaMRI.jl.</p>
<p>In this post, I‚Äôd like to summarize what I did this summer and everything I learned along the way!</p>
<blockquote class="blockquote">
<p>If you want to learn more about me, you can connect with me here: <a href="https://www.linkedin.com/in/ryan-kierulf-022062201/"><strong>LinkedIn</strong></a>, <a href="https://github.com/rkierulf"><strong>GitHub</strong></a></p>
</blockquote>
</section>
<section id="what-is-komamri" class="level1">
<h1>What is KomaMRI?</h1>
<p><a href="https://github.com/JuliaHealth/KomaMRI.jl">KomaMRI</a> is a Julia package for efficiently simulating Magnetic Resonance Imaging (MRI) acquisitions. MRI simulation is a useful tool for researchers, as it allows testing new pulse sequences to analyze the signal output and image reconstruction quality without needing to actually take an MRI, which may be time or cost-prohibitive.</p>
<p>In contrast to many other MRI simulators, KomaMRI.jl is open-source, cross-platform, and comes with an intuitive user interface (To learn more about KomaMRI, you can read the paper introducing it <a href="https://onlinelibrary.wiley.com/doi/full/10.1002/mrm.29635">here</a>). However, being developed fairly recently, there are still new features that can be added and optimization to be done.</p>
</section>
<section id="project-goals" class="level1">
<h1>Project Goals</h1>
<p>The goals outlined by Carlos (my project mentor) and I the beginning of this summer were:</p>
<ol type="1">
<li><p>Extend GPU support beyond CUDA to include AMD, Intel, and Apple Silicon GPUs, through the packages <a href="https://github.com/JuliaGPU/AMDGPU.jl">AMDGPU.jl</a>, <a href="https://github.com/JuliaGPU/oneAPI.jl">oneAPI.jl</a>, and <a href="https://github.com/JuliaGPU/Metal.jl">Metal.jl</a></p></li>
<li><p>Create a CI pipeline to be able to test each of the GPU backends</p></li>
<li><p>Create a new kernel-based simulation method optimized for the GPU, which we expected would outperform array broadcasting</p></li>
<li><p>(Stretch Goal) Look into ways to support running distributed simulations across multiple nodes or GPUs</p></li>
</ol>
</section>
<section id="step-1-support-for-different-gpu-backends" class="level1">
<h1>Step 1: Support for Different GPU backends</h1>
<p>Previously, KomaMRI‚Äôs support for GPU acceleration worked by converting each array used within the simulation to a <code>CuArray</code>, the device array type defined in <a href="https://github.com/JuliaGPU/CUDA.jl">CUDA.jl</a>. This was done through a general <code>gpu</code> function. The inner simulation code is GPU-agnostic, as the same operations can be performed on a CuArray or a plain CPU Array. This approach is good for extensibility, as it does not require writing different simulation code for the CPU / GPU, or different GPU backends, and would only work in a language like Julia based on runtime dispatch!</p>
<p>To extend this to multiple GPU backends, all that is needed is to generalize the <code>gpu</code> function to convert to either the device types of CUDA.jl, AMDGPU.jl, Metal.jl, or oneAPI.jl, depending on which backend is being used. To give an idea of what the gpu conversion code looked like before, here is a snippet:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> KomaCUDAAdaptor <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">adapt_storage</span>(to<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">KomaCUDAAdaptor</span>, x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CUDA.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cu</span>(x)</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gpu</span>(x)</span>
<span id="cb1-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_use_cuda</span>()</span>
<span id="cb1-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> use_cuda[] ? <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fmap</span>(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">adapt</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">KomaCUDAAdaptor</span>(), x), x; exclude<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>_isleaf) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> x</span>
<span id="cb1-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#CPU adaptor</span></span>
<span id="cb1-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> KomaCPUAdaptor <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span>
<span id="cb1-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">adapt_storage</span>(to<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">KomaCPUAdaptor</span>, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">AbstractArray</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">adapt</span>(<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Array</span>, x)</span>
<span id="cb1-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">adapt_storage</span>(to<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">KomaCPUAdaptor</span>, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">AbstractRange</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x</span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cpu</span>(x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fmap</span>(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">adapt</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">KomaCPUAdaptor</span>(), x), x)</span></code></pre></div>
<p>The <code>fmap</code> function is from the package <code>Functors.jl</code> and can recursively apply a function to a struct tagged with <code>@functor</code>. The function being applied is <code>adapt</code> from <code>Adapt.jl</code>, which will call the lower-level <code>adapt_storage</code> function to actually convert to / from the device type. The second parameter to <code>adapt</code> is what is being adapted, and the first is what it is being adapted to, which in this case is a custom adapter struct <code>KomaCUDAAdapter</code>.</p>
<p>One possible approach to generalize to different backends would be to define additional adapter structs for each backend and corresponding <code>adapt_storage</code> functions. This is what the popular machine learning library <a href="https://github.com/FluxML/Flux.jl">Flux.jl</a> does. However, there is a simpler way!</p>
<p>Each backend package (CUDA.jl, Metal.jl, etc.) already defines <code>adapt_storage</code> functions for converting different types to / from corresponding device type. Reusing these functions is preferable to defining our own since, not only does it save work, but it allows us to rely on the expertise of the developers who wrote those packages! If there is an issue with types being converted incorrectly that is fixed in one of those packages, then we would not need to update our code to get this fix since we are using the definitions they created.</p>
<p>Our final <code>gpu</code> and <code>cpu</code> functions are very simple. The <code>backend</code> parameter is a type derived from the abstract <code>Backend</code> type of <a href="https://github.com/JuliaGPU/KernelAbstractions.jl"><code>KernelAbstractions.jl</code></a>, which is extended by each of the backend packages:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">KernelAbstractions</span> as KA</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gpu</span>(x, backend<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">KA.GPU</span>)</span>
<span id="cb2-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fmap</span>(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">adapt</span>(backend, x), x; exclude<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>_isleaf)</span>
<span id="cb2-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cpu</span>(x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fmap</span>(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">adapt</span>(KA.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CPU</span>(), x), x, exclude<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>_isleaf)</span></code></pre></div>
<p>The other work needed to generalize our GPU support involved switching to use <a href="https://pkgdocs.julialang.org/v1/creating-packages/#Conditional-loading-of-code-in-packages-(Extensions)">package extensions</a> to avoid having each of the backend packages as an explicit dependency, and defining some basic GPU functions for backend selection and printing information about available GPU devices. The pull request for adding support for multiple backends is linked below:</p>
<blockquote class="blockquote">
<p>https://github.com/JuliaHealth/KomaMRI.jl/pull/405</p>
</blockquote>
</section>
<section id="step-2-buildkite-ci" class="level1">
<h1>Step 2: Buildkite CI</h1>
<p>At the time the above pull request was merged, we weren‚Äôt sure whether the added support for AMD and Intel GPUs actually worked, since we only had access to CUDA and Apple Silicon GPUs. So the next step was to set up a CI to test each GPU backend. To do this, we used <a href="https://github.com/JuliaGPU/KernelAbstractions.jl">Buildkite</a>, which is a CI platform that many other Julia packages also use. Since there were many examples to follow, setting up our testing pipeline was not too difficult. Each step of the pipeline does the required environment setup and then calls <code>Pkg.test()</code> for KomaMRICore. As an example, here is what the AMDGPU step of our pipeline looks like:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource {yml} number-lines code-with-copy"><code class="sourceCode"><span id="cb3-1">      - label: "AMDGPU: Run tests on v{{matrix.version}}"</span>
<span id="cb3-2">        matrix:</span>
<span id="cb3-3">          setup:</span>
<span id="cb3-4">            version:</span>
<span id="cb3-5">              - "1"</span>
<span id="cb3-6">        plugins:</span>
<span id="cb3-7">          - JuliaCI/julia#v1:</span>
<span id="cb3-8">              version: "{{matrix.version}}"</span>
<span id="cb3-9">          - JuliaCI/julia-coverage#v1:</span>
<span id="cb3-10">              codecov: true</span>
<span id="cb3-11">              dirs:</span>
<span id="cb3-12">                - KomaMRICore/src</span>
<span id="cb3-13">                - KomaMRICore/ext</span>
<span id="cb3-14">        command: |</span>
<span id="cb3-15">          julia -e 'println("--- :julia: Instantiating project")</span>
<span id="cb3-16">              using Pkg</span>
<span id="cb3-17">              Pkg.develop([</span>
<span id="cb3-18">                  PackageSpec(path=pwd(), subdir="KomaMRIBase"),</span>
<span id="cb3-19">                  PackageSpec(path=pwd(), subdir="KomaMRICore"),</span>
<span id="cb3-20">              ])'</span>
<span id="cb3-21">          </span>
<span id="cb3-22">          julia --project=KomaMRICore/test -e 'println("--- :julia: Add AMDGPU to test environment")</span>
<span id="cb3-23">              using Pkg</span>
<span id="cb3-24">              Pkg.add("AMDGPU")'</span>
<span id="cb3-25">          </span>
<span id="cb3-26">          julia -e 'println("--- :julia: Running tests")</span>
<span id="cb3-27">              using Pkg</span>
<span id="cb3-28">              Pkg.test("KomaMRICore"; coverage=true, test_args=["AMDGPU"])'</span>
<span id="cb3-29">        agents:</span>
<span id="cb3-30">          queue: "juliagpu"</span>
<span id="cb3-31">          rocm: "*"</span>
<span id="cb3-32">        timeout_in_minutes: 60</span></code></pre></div>
<p>We also decided that in addition to a testing CI, it would also be helpful to have a benchmarking CI to track performance changes resulting from each commit to the main branch of the repository. <a href="https://github.com/LuxDL/Lux.jl">Lux.jl</a> had a very nice-looking benchmarking page, so I decided to look into their approach. They were using <a href="https://github.com/benchmark-action/github-action-benchmark">github-action-benchmark</a>, a popular benchmarking action that integrates with the Julia package <a href="https://github.com/JuliaCI/BenchmarkTools.jl"><code>BenchmarkTools.jl</code></a>. github-action-benchmark does two very useful things:</p>
<ol type="1">
<li><p>Collects benchmarking data into a json file and provides a default index.html to display this data. If put inside a relative path in the gh-pages branch of a repository, this results in a public benchmarking page which is automatically updated after each commit!</p></li>
<li><p>Comments on a pull request with the benchmarking results compared with before the pull request. Example: https://github.com/JuliaHealth/KomaMRI.jl/pull/442#pullrequestreview-2213921334</p></li>
</ol>
<p>The only issue was that since github-action-benchmark is a github action, it is meant to be run within github by one of the available github runners. While this works for CPU benchmarking, only Buildkite has the CI setup for each of the GPU backends we are using, and Lux.jl‚Äôs benchmarks page only included CPU benchmarks, not GPU benchmarks (Note: we talked with Avik, the repository owner of Lux.jl, and Lux.jl has since adopted the approach outlined below to display GPU and CPU benchmarks together). I was not able to find any examples of other julia packages using github-action-benchmark for GPU benchmarking.</p>
<p>Fortunately, there is a tool someone developed to download results from Buildkite into a github action (https://github.com/EnricoMi/download-buildkite-artifact-action). This repository only had 1 star when I found it, but it does exactly what we needed: it identifies the corresponding Buildkite build for a commit, waits for it to finish, and then downloads the artifacts for the build into the github action it is being run from. With this, we were able to download the Buildkite benchmark results from a final aggregation step into our benchmarking action and upload to github-action-benchmark to publish to either the main data.js file for our benchmarking website, or pull request.</p>
<p>Our final benchmarking page looks like this and is <a href="https://juliahealth.org/KomaMRI.jl/benchmarks/">publicly accessible</a>:</p>
<p><img src="https://juliahealth.org/JuliaHealthBlog/posts/ryan-gsoc/Benchmark_Page.png" class="img-fluid"></p>
<p>One neat thing about github-action-benchmark is that the default index.html is extensible, so even though by deault it only shows time, the information for memory usage and number of allocations is also collected into the json file, and can be displayed as well.</p>
<p>A successful CI run on Buildkite Looks like <a href="https://buildkite.com/julialang/komamri-dot-jl/builds/925">this</a>:</p>
<p><img src="https://juliahealth.org/JuliaHealthBlog/posts/ryan-gsoc/CI_Run.png" class="img-fluid"></p>
<p>The pull requests for creating the CI testing and benchmarking pipeline, and changing the index.html for our benchmark page are listed below:</p>
<ol type="1">
<li>https://github.com/JuliaHealth/KomaMRI.jl/pull/411</li>
<li>https://github.com/JuliaHealth/KomaMRI.jl/pull/418</li>
<li>https://github.com/JuliaHealth/KomaMRI.jl/pull/421</li>
</ol>
</section>
<section id="step-3-optimization" class="level1">
<h1>Step 3: Optimization</h1>
<p>With support for multiple backends enabled, and a robust CI, the next step was to optimize our simulation code as much as possible. Our original idea was to create a new GPU-optimized simulation method, but before doing this we wanted to look more at the existing code and optimize for the CPU.</p>
<p>The simulation code is solving a differential equation (the [Bloch equations(https://en.wikipedia.org/wiki/Bloch_equations)]) over time. Most differential equation solvers step through time, updating the current state at each time step, but our previous simulation code, more optimized for the GPU, did a lot of computations across all time points in a simulation block, allocating a matrix of size <code>Nspins by NŒît</code> each time this was done. Although this is beneficial for the GPU, where there are millions of threads available on which to parallelize these computations, for the CPU it is more important to conserve memory, and the aforementioned approach of stepping through time is preferable.</p>
<p>After seeing that this approach did help speed up simulation time on the CPU, but was not faster on the GPU (7x slower for Metal!) we decided to separate our simulation code for the GPU and CPU, dispatching based on the <code>KernelAbstractions.Backend</code> type depending on if it is <code>&lt;:KernelAbstractions.CPU</code> or <code>&lt;:KernelAbstractions.GPU</code>.</p>
<p>Other things we were able to do to speed up CPU computation time:</p>
<ol type="1">
<li><p>Preallocating each array used inside the core simulation code so it can be re-used from one simulation block to the next.</p></li>
<li><p><a href="https://github.com/JuliaHealth/KomaMRI.jl/blob/master/KomaMRICore/src/simulation/SimMethods/Bloch/BlochCPU.jl#L90">Skipping an expensive computation</a> if the magnetization at that time point is not added to the final signal</p></li>
<li><p>Ensuring that each statement is fully broadcasted. We were surprised to see the difference between the following examples:</p></li>
</ol>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Fast</span></span>
<span id="cb4-2">Bz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.*</span> seq.Gx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.+</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.*</span> seq.Gy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.+</span> z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.*</span> seq.Gz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.+</span> p.Œîw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">./</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">T</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>œÄ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.*</span> Œ≥)</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Slow</span></span>
<span id="cb4-5">Bz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.*</span> seq.Gx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.+</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.*</span> seq.Gy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.+</span> z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.*</span> seq.Gz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.+</span> p.Œîw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">T</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>œÄ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> Œ≥)</span></code></pre></div>
<ol start="4" type="1">
<li>Using the <code>cis</code> function for complex exponentiation, which is faster than <code>exp</code></li>
</ol>
<p>With these changes, the mean improvement in simulation time aggregating across each of our benchmarks for 1, 2, 4, and 8 CPU threads was ~4.28. For 1 thread, the average improvement in memory usage was 90x!</p>
<p>The next task was optimizing the simulation code for the GPU. Although our original idea was to put everything into one GPU kernel, we found that the existing broadcasting operations were already very fast, and that custom kernels we wrote were not able to outperform the previous implementation. The Julia GPU compiler team deserves a lot of credit for developing such fast broadcasting implementations!</p>
<p>However, this does not mean that we were unable to improve the GPU simulation time. Similar to with the CPU, preallocation made a substantial difference. Parallelizing as much work as possible across the time points for a simulation block was also found to beneficial. For the parts that needed to be done sequentially, a <a href="https://github.com/JuliaHealth/KomaMRI.jl/blob/master/KomaMRICore/src/simulation/SimMethods/Bloch/KernelFunctions.jl#L5">custom GPU kernel</a> was written which used the <code>KernelAbstractions.@localmem</code> macro for arrays being updated at each time step to yield faster memory access.</p>
<p>The mean speedup we saw across the 4 supported GPU backends was 4.16, although this varied accross each backend (for example, CUDA was only 2.66x faster while oneAPI was 28x faster). There is a <a href="https://github.com/JuliaHealth/KomaMRI.jl/blob/master/KomaMRICore/src/simulation/SimMethods/Bloch/BlochGPU.jl#L151">remaining bottleneck</a> in the <code>run_spin_preceession!</code> function having to do with logical indexing that I was not able to resolve, but could be solved in the future to speed up the GPU simulation time even further!</p>
<p>The pull requests optimizing code for the CPU and GPU are below:</p>
<ol type="1">
<li><p>https://github.com/JuliaHealth/KomaMRI.jl/pull/443</p></li>
<li><p>https://github.com/JuliaHealth/KomaMRI.jl/pull/459</p></li>
<li><p>https://github.com/JuliaHealth/KomaMRI.jl/pull/462</p></li>
</ol>
</section>
<section id="step-4-distributed-support" class="level1">
<h1>4. Step 4: Distributed Support</h1>
<p>This last step was a stretch goal for exploring how to add distributed support to KomaMRI. MRI simulations can become quite large, so it is useful to be able to distribute work across either multiple GPUs or multiple compute nodes.</p>
<p>A nice thing about MRI simulation is the independent spin property: if a phantom object (representing, for example a brain tissue slice) is divided into two parts, and each part is simulated separately, the signal result from simulating the whole phantom will be equal to the sum of the signal results from simulating each subdivision of the original phantom. This makes it quite easy to distribute work, either across more than one GPU or accross multiple compute nodes.</p>
<p>The following scripts worked, with the only necessary code change to the repository being a new + function to add two RawAcquisitionData structs:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Use multiple GPUs:</span></span>
<span id="cb5-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">using</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Distributed</span></span>
<span id="cb5-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">using</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">CUDA</span></span>
<span id="cb5-4"></span>
<span id="cb5-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Add workers based on the number of available devices</span></span>
<span id="cb5-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">addprocs</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">devices</span>()))</span>
<span id="cb5-7"></span>
<span id="cb5-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Define inputs on each worker process</span></span>
<span id="cb5-9"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">@everywhere</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">begin</span></span>
<span id="cb5-10">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">using</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">KomaMRI</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">CUDA</span></span>
<span id="cb5-11">    sys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Scanner</span>()</span>
<span id="cb5-12">    seq <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PulseDesigner.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">EPI_example</span>()</span>
<span id="cb5-13">    obj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">brain_phantom2D</span>()</span>
<span id="cb5-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Divide phantom</span></span>
<span id="cb5-15">    parts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kfoldperm</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(obj), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nworkers</span>())</span>
<span id="cb5-16"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span>
<span id="cb5-17"></span>
<span id="cb5-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Distribute simulation across workers</span></span>
<span id="cb5-19">raw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Distributed</span>.<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">@distributed</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nworkers</span>()</span>
<span id="cb5-20">    KomaMRICore.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_device!</span>(i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Sets device for this worker, note that CUDA devices are indexed from 0</span></span>
<span id="cb5-21">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">simulate</span>(obj[parts[i]], seq, sys)</span>
<span id="cb5-22"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span></code></pre></div>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Use multiple compute nodes</span></span>
<span id="cb6-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">using</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Distributed</span></span>
<span id="cb6-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">using</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">ClusterManagers</span></span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Add workers based on the specified number of SLURM tasks</span></span>
<span id="cb6-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">addprocs</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SlurmManager</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse</span>(<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">ENV</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SLURM_NTASKS"</span>])))</span>
<span id="cb6-7"></span>
<span id="cb6-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Define inputs on each worker process</span></span>
<span id="cb6-9"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">@everywhere</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">begin</span></span>
<span id="cb6-10">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">using</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">KomaMRI</span></span>
<span id="cb6-11">    sys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Scanner</span>()</span>
<span id="cb6-12">    seq <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PulseDesigner.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">EPI_example</span>()</span>
<span id="cb6-13">    obj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">brain_phantom2D</span>()</span>
<span id="cb6-14">    parts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kfoldperm</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(obj), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nworkers</span>())</span>
<span id="cb6-15"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span>
<span id="cb6-16"></span>
<span id="cb6-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Distribute simulation across workers</span></span>
<span id="cb6-18">raw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Distributed</span>.<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">@distributed</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nworkers</span>()</span>
<span id="cb6-19">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">simulate</span>(obj[parts[i]], seq, sys)</span>
<span id="cb6-20"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span></code></pre></div>
<p>Pull reqeust for adding these examples to the KomaMRI documentation: https://github.com/JuliaHealth/KomaMRI.jl/pull/468</p>
</section>
<section id="conclusions-future-work" class="level1">
<h1>Conclusions / Future Work</h1>
<p>This project was a 350-hour large project, since there were many goals to accomplish. To summarize what changed since the beginning of the project:</p>
<ol type="1">
<li><p>Added support for AMDGPU.jl, Metal.jl, and oneAPI.jl GPU backends</p></li>
<li><p>CI for automated testing and benchmarking accross each backend + <a href="https://juliahealth.org/KomaMRI.jl/benchmarks/">public benchmarks page</a></p></li>
<li><p>Significantly faster CPU and GPU performance</p></li>
<li><p>Demonstrated distributed support and examples added in documentation</p></li>
</ol>
<p>Future work could look at ways to further optimize the simulation code, since despite the progress made, I believe there is more work to be done! The aforementioned logical indexing issue is still not resolved, and the kernel used inside the <code>run_spin_excitation!</code> function has not been profiled in depth. KomaMRI is also looking into adding support for higher-order ODE methods, which could require more GPU kernels being written.</p>
</section>
<section id="acknowledgements" class="level1">
<h1>Acknowledgements</h1>
<p>I would like to thank my mentor, Carlos Castillo, for his help and support on this project. I would also like to thank Jakub Mitura, who attended some of our meetings to help with GPU optimization, Dilum Aluthge who helped set up our BuildKite pipeline, and Tim Besard, who answered many GPU-related questions that Carlos and I had.</p>


<!-- -->

</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a><div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{kierulf2024,
  author = {Kierulf, Ryan},
  title = {GSoC ‚Äô24: {Enhancements} to {KomaMRI.jl} {GPU} {Support}},
  date = {2024-08-30},
  url = {https://juliahealth.org/JuliaHealthBlog/posts/ryan-gsoc/Ryan_GSOC.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-kierulf2024" class="csl-entry quarto-appendix-citeas">
Kierulf, Ryan. 2024. <span>‚ÄúGSoC ‚Äô24: Enhancements to KomaMRI.jl GPU
Support.‚Äù</span> August 30, 2024. <a href="https://juliahealth.org/JuliaHealthBlog/posts/ryan-gsoc/Ryan_GSOC.html">https://juliahealth.org/JuliaHealthBlog/posts/ryan-gsoc/Ryan_GSOC.html</a>.
</div></div></section></div> ]]></description>
  <category>gsoc</category>
  <category>mri</category>
  <category>gpu</category>
  <category>hpc</category>
  <category>simulation</category>
  <guid>https://juliahealth.org/JuliaHealthBlog/posts/ryan-gsoc/Ryan_GSOC.html</guid>
  <pubDate>Thu, 29 Aug 2024 18:30:00 GMT</pubDate>
</item>
<item>
  <title>GSoC ‚Äô24: IPUMS.jl Small Project</title>
  <dc:creator>Michela Rocchetti</dc:creator>
  <link>https://juliahealth.org/JuliaHealthBlog/posts/michela-gsoc/Michela_JSoC.html</link>
  <description><![CDATA[ 




<section id="hello" class="level1">
<h1>Hello! üëã</h1>
<p>Hi! I am Michela, I have a Master‚Äôs degree in Physics of Complex Systems and I am currently working as a software engineer in Rome, where I am from. During my studies, I became interested in the use of modeling and AI methods to improve healthcare and how these tools can be used to better understand how cultural and social backgrounds influence the health of individuals. I am also interested in the computational modeling of the brain and the human body and its implications for a better understanding of certain pathological conditions.</p>
<p>With these motivations in mind, I heard about Google Summer of Code. Since I had studied Julia in some courses and given that the language is expanding rapidly, I decided to find a project within Julia. As a result, I found the project of <a href="https://jacobzelko.com">Jacob Zelko (<span class="citation" data-cites="TheCedarPrince">@TheCedarPrince</span>)</a> to start this experience.</p>
<blockquote class="blockquote">
<p>If you want to learn more about me, you can connect with me here: <a href="https://www.linkedin.com/in/michela-rocchetti-261793218/"><strong>LinkedIn</strong></a>, <a href="https://github.com/MichelaRocchetti"><strong>GitHub</strong></a></p>
</blockquote>
</section>
<section id="project-description" class="level1">
<h1>Project Description</h1>
<p><em>IPUMS</em> is the ‚Äúworld‚Äôs largest available single database of census microdata‚Äù, providing survey and census data from around the world. It includes several projects that provide a wide variety of datasets. The information and data collected by <em>IPUMS</em> are useful for comparative research, as well as for the analysis of individuals in their life contexts. These data can be used to create a more comprehensive dataset that will facilitate research on the social determinants of health for different types of diseases, social communities, and geographical areas.</p>
<p><img src="https://juliahealth.org/JuliaHealthBlog/posts/michela-gsoc/IPUMS_grid_logo.png" class="img-fluid"></p>
<blockquote class="blockquote">
<p>To learn more about IPUMS, visit the <a href="https://www.ipums.org">website</a></p>
</blockquote>
</section>
<section id="tasks-and-goals" class="level1">
<h1>Tasks and Goals</h1>
<p>The primary objectives of this proposal are to:</p>
<ol type="1">
<li><p>Develop a native Julia package to interact with the APIs available around the datasets <em>IPUMS</em> provides.</p></li>
<li><p>Provide useful utilities within this package for manipulating <em>IPUMS</em> datasets.</p></li>
<li><p>Compose this package with the wider Julia ecosystem to enable novel research in health, economics, and more.</p></li>
</ol>
<p>To achieve this, the work was distributed as follows:</p>
<ol type="1">
<li>Expand some of the functionality developed in <code>ipumsr</code> <em>IPUMS</em> NHGIS
<ul>
<li>Create a link between OpenAPI documentation and the functions internally used in IPUMS.jl: updating already present functions, determining if updating is needed, and testing them</li>
<li>Develop functionality similar to the get_metadata_nghis function present in ipumsr</li>
</ul></li>
<li>Update <em>IPUMS</em> documentation
<ul>
<li>Set up and deploy DocumenterVitepress.jl<br>
</li>
<li>Write a blog post on how IPUMS.jl can be composed within the ecosystem.</li>
</ul></li>
</ol>
</section>
<section id="how-the-work-was-done" class="level1">
<h1>How the work was done</h1>
<p>The first task was to migrate documents from Documenter to DocumenterVitepress.This issue aims to support the significant refactoring underway across JuliaHealth, aimed at improving the discoverability and cohesion of the JuliaHealth ecosystem, particularly about documentation. This issue is intended to create a more attractive entry point for new Julia users interested in health research within the Julia community. To accomplish this task, a dependency of DocumenterVitepress was added to the docs directory of the IPUMS.jl repository. Once this was done, the Documenter.jl make.jl file was migrated into a DocumenterVitepress.jl make.jl file. Working on the make.jl file, the pages structure were added to the web page explaining the IPUMS.jl package. With this in mind, those were added: 1. Home: to explain the main purpose of the package 2. Workflows: to explain the working process 3. How to: to give general information 4. Tutorials: to show how to use IPUMS.jl<br>
5. Examples: some examples of activities 6. Mission: to explain why the package is useful for the community 7. References: references used to write the pages.</p>
<p>This first task takes some time, especially setting up GitHub and cloning the repository locally. At this point, my experience with GitHub was really limited and I had to learn how to use the Git environment from scratch, for example how to do continuous integration (to commit code to a shared repository), documentation release and merge, and local testing. I found the support of my mentors and searching for material online was really helpful.</p>
<p>The second task was to update the documentation of IPUMS.jl by modifying the functionality within the model folder in the IPUMS.jl folder. The main aim of this task was to a description of the function and its attributes, an example of possible implementation and result, and finally to show how to use it. The documentation to be updated as of several types of functions: 1. Data extract 2. Data set 3. Data Table 4. Time series table 5. Error 6. Shapefile. Each of these macro-categories (from 1 to 4) contains a set of functions, each signaling the different expected output and specific purpose. Information about what each function does, and the meaning of each specific input variable, has been found on the <em>IPUMS</em> website and references have been made in the written documentation.</p>
</section>
<section id="how-to-work-with-ipums" class="level1">
<h1>How to work with IPUMS</h1>
<p>After writing down the description of the function and the inputs, examples were formulated, starting from the <em>IPUMS</em> website: when you register at <a href="https://uma.pop.umn.edu/usa/user/new">IPUMS</a>, an API key is given. which is used, among other things, to run pre-written code on the website. This code contains examples of these functions, and these examples have been adapted by changing some input values and adapting them to work in the Julia framework. The latter task was done by simply rewriting some structures, such as dictionaries, maps, or lists, in the Julia language. Here is a small guide on how to set up working with the API: 1. Create an <em>IPUMS</em> account 2. Log in to your account 3. Copy the API key, which can be obtained from the <a href="https://account.ipums.org/api_keys">website</a> 4. Use the key to run the code that is already available on the <a href="https://developer.ipums.org/docs/v2/reference/"><em>IPUMS</em> Developer Portal</a>, where you will also find information about the variables and packages.</p>
</section>
<section id="functions-testing" class="level1">
<h1>Functions testing</h1>
<p>A final task was to test the functions in the ‚Äòapi_IPUMSAPI.jl‚Äô file. In this file, the function to be tested and other functions are defined and the most important ones are extracted to be available in the available throughout the framework. Some of the functions to be tested were the following:</p>
<ol type="1">
<li><code>metadata_nhgis_data_tables_get</code></li>
<li><code>metadata_nhgis_datasets_dataset_data_tables_data_table_get</code></li>
<li><code>metadata_nhgis_datasets_dataset_get</code></li>
<li><code>metadata_nhgis_datasets_get</code></li>
</ol>
<p>Before working on the Julia files, testing and understanding the original R function was done using R studio.</p>
<p><img src="https://juliahealth.org/JuliaHealthBlog/posts/michela-gsoc/rstudio.png" class="img-fluid"></p>
<p>Each function was then tested using the API key from the <em>IPUMS</em> registration as well as other input examples taken from the documentation or the <em>IPUMS</em> website. or from the <em>IPUMS</em> website. All functions were displayed successfully, giving the expected result, so it can be concluded that the translation from R to Julia is successful.</p>
<div id="2" class="cell" data-execution_count="0">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">using</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">IPUMS</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">using</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">OpenAPI</span></span>
<span id="cb1-3"></span>
<span id="cb1-4">api_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"insert your key here"</span></span>
<span id="cb1-5"></span>
<span id="cb1-6">version <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2"</span></span>
<span id="cb1-7">page_number <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-8">page_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2500</span></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#media_type = </span></span>
<span id="cb1-10"></span>
<span id="cb1-11">api <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IPUMSAPI</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://api.ipums.org"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Dict</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Authorization"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> api_key));</span>
<span id="cb1-12"></span>
<span id="cb1-13">res1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">metadata_nhgis_data_tables_get</span>(api, version)</span>
<span id="cb1-14"></span>
<span id="cb1-15">res2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">metadata_nhgis_datasets_dataset_get</span>(api, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022_ACS1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2"</span>);</span>
<span id="cb1-16"></span>
<span id="cb1-17">res3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">metadata_nhgis_datasets_dataset_data_tables_data_table_get</span>(api, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022_ACS1"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B01001"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2"</span>);</span>
<span id="cb1-18"></span>
<span id="cb1-19">res4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">metadata_nhgis_datasets_get</span>(api, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2"</span>);</span></code></pre></div>
</details>
</div>
<p>An example of the output is:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource {json} number-lines code-with-copy"><code class="sourceCode"><span id="cb2-1">. . .</span>
<span id="cb2-2"></span>
<span id="cb2-3">{</span>
<span id="cb2-4">  "name": "NT1",</span>
<span id="cb2-5">  "nhgisCode": "AAA",</span>
<span id="cb2-6">  "description": "Total Population",</span>
<span id="cb2-7">  "universe": "Persons",</span>
<span id="cb2-8">  "sequence": 1,</span>
<span id="cb2-9">  "datasetName": "1790_cPop",</span>
<span id="cb2-10">  "nVariables": [</span>
<span id="cb2-11">    1</span>
<span id="cb2-12">  ]</span>
<span id="cb2-13">}</span>
<span id="cb2-14"></span>
<span id="cb2-15">. . .</span></code></pre></div>
</section>
<section id="accomplished-goals-and-future-development" class="level1">
<h1>Accomplished Goals and Future Development</h1>
<p>The project was a 90-hour small project and during this time the documentation was completed and the testing of the metadata function was done, as well as the migration from Documenter.jl to DocumenterVitepress.jl. During these months some things took longer than I expected because of some problems that occurred, so some things were missing in relation to the original plan. However, this time was useful for learning new things: - I saw how to work with a package under development, how to work with large datasets, and how to write documentation - I had the opportunity to better understand how to work with Git and GitHub - I learned some new things about R, which was a completely unknown language to me. - I deepened my knowledge of Julia, a language I had worked with during my time at university. - I had the chance to work on a large open-source project, to be part of a large community, and to learn how to communicate with it efficiently.</p>
<p>A special thanks goes to my mentors, Jacob Zelko and Krishna Bhogaonker, for helping me through this process.</p>
<p>Future developments of this work could include deepening the work that my mentors and I have started, with the possibility of integrating this package with other machine learning packages in Julia and, from there, doing new analyses of the data in terms of social and geographical implications for health.</p>


<!-- -->

</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a><div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{rocchetti2024,
  author = {Rocchetti, Michela},
  title = {GSoC ‚Äô24: {IPUMS.jl} {Small} {Project}},
  date = {2024-08-26},
  url = {https://juliahealth.org/JuliaHealthBlog/posts/michela-gsoc/Michela_JSoC.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-rocchetti2024" class="csl-entry quarto-appendix-citeas">
Rocchetti, Michela. 2024. <span>‚ÄúGSoC ‚Äô24: IPUMS.jl Small
Project.‚Äù</span> August 26, 2024. <a href="https://juliahealth.org/JuliaHealthBlog/posts/michela-gsoc/Michela_JSoC.html">https://juliahealth.org/JuliaHealthBlog/posts/michela-gsoc/Michela_JSoC.html</a>.
</div></div></section></div> ]]></description>
  <category>gsoc</category>
  <category>geospatial</category>
  <category>census</category>
  <guid>https://juliahealth.org/JuliaHealthBlog/posts/michela-gsoc/Michela_JSoC.html</guid>
  <pubDate>Sun, 25 Aug 2024 18:30:00 GMT</pubDate>
</item>
<item>
  <title>Dummy Post</title>
  <dc:creator>Foobar </dc:creator>
  <link>https://juliahealth.org/JuliaHealthBlog/posts/dummy/</link>
  <description><![CDATA[ 




<section id="seciton-1" class="level1">
<h1>Seciton 1</h1>
<p>Small dummy blog post</p>
<div id="2" class="cell" data-execution_count="1">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb1-1"><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="1">
<pre><code>4</code></pre>
</div>
</div>
<div id="4" class="cell" data-execution_count="1">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">println</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>4</code></pre>
</div>
</div>
</section>
<section id="section-2" class="level1">
<h1>Section 2</h1>
</section>
<section id="section-3" class="level1">
<h1>Section 3</h1>


<!-- -->

</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a><div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{2024,
  author = {, Foobar},
  title = {Dummy {Post}},
  date = {2024-06-22},
  url = {https://juliahealth.org/JuliaHealthBlog/posts/dummy/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-2024" class="csl-entry quarto-appendix-citeas">
Foobar. 2024. <span>‚ÄúDummy Post.‚Äù</span> June 22, 2024. <a href="https://juliahealth.org/JuliaHealthBlog/posts/dummy/">https://juliahealth.org/JuliaHealthBlog/posts/dummy/</a>.
</div></div></section></div> ]]></description>
  <category>news</category>
  <category>code</category>
  <category>analysis</category>
  <guid>https://juliahealth.org/JuliaHealthBlog/posts/dummy/</guid>
  <pubDate>Fri, 21 Jun 2024 18:30:00 GMT</pubDate>
</item>
</channel>
</rss>
