{
  "hash": "d088621135fc827281bbeab8b807fab9",
  "result": {
    "engine": "julia",
    "markdown": "---\ntitle: \"GSoC '25 Phase 1: Enabling OMOP CDM Tables and Preprocessing in HealthBase.jl\"\ndescription: \"A summary of my project for Google Summer of Code - 2025 (Phase 1)\"\nauthor: \"Kosuri Lakshmi Indu\"\ndate: \"7/12/2025\"\ntoc: true\nengine: julia\nimage: false\ncategories:\n  - gsoc\n  - omop cdm\n  - julia health\n  - healthbase\n  - tables\n  - preprocessing\n---\n\n\n\n# Introduction ðŸ‘‹\n\nHi everyone! I'm Kosuri Lakshmi Indu, a third-year undergraduate student majoring in Computer Science and a GSoC 2025 contributor. Over the past few months, Iâ€™ve had the opportunity to work with the JuliaHealth community, where I got a chance to learn, contribute, and get involved in projects focused on improving how we work with real-world health data.\n\nAs part of this project, I contributed to HealthBase.jl, a Julia package within the JuliaHealth ecosystem. During Phase 1, I focused on implementing both of these key features - adding seamless `Tables.jl` integration for working with OMOP CDM tables and developing a set of reusable preprocessing functions to make data modeling easier and more consistent.\n\nIn this blog post, I'll walk you through everything we accomplished in Phase 1 from the motivation behind these additions, to examples of how they work in practice.\n\n1. You can find my [**GSoC'25 Project Link**](https://summerofcode.withgoogle.com/programs/2025/projects/xpSEgu5b)\n\n2. You can check out the project repository here: [**HealthBase.jl**](https://github.com/JuliaHealth/HealthBase.jl)\n\n3. Official Documentation of HealthBase.jl: [**Documentation**](https://juliahealth.org/HealthBase.jl/dev/)\n\n4. If you want, you can connect with me on [**LinkedIn**](https://www.linkedin.com/in/kosuri-indu/) and [**GitHub**](https://github.com/kosuri-indu/).\n\n# Background\n\n## What is HealthBase.jl?\n\n**HealthBase.jl** is a lightweight foundational package that serves as a shared namespace across the JuliaHealth ecosystem. It's designed to provide consistent interfaces, common utilities, and templates for building health data workflows in Julia, all while staying minimal and extensible.\n\nAs part of this project, we expanded HealthBase.jl to support working directly with OMOP CDM data. While the HealthTable interface is defined in HealthBase.jl as a generic, reusable interface for working with health data tables, the actual implementation for the OMOP Common Data Model lives in the OMOPCommonDataModel.jl package. \n\nThis design allows HealthBase.jl to provide a flexible interface that can be extended for any health data standard - not just OMOP CDM. So if someone wants to make HealthTable work for their packages, they can use the HealthTable interface from HealthBase.jl and define the necessary extensions accordingly.\n\n# Project Description\n\nThis included introducing a new type called **`HealthTable`**, which wraps OMOP CDM tables with built-in schema validation and metadata attachment. We also made these tables compatible with the wider Julia data ecosystem by implementing the **`Tables.jl`** interface, making it easier to plug OMOP CDM datasets into standard tools for modeling and analysis. To support real-world workflows, we added a suite of preprocessing utilities tailored to observational health data, including one-hot encoding, vocabulary compression, and concept mapping. All of these features aim to make it easier for researchers to load, validate, and prepare OMOP CDM datasets in a reproducible and scalable way - while keeping the code clean and modular.\n\n# Project Goals\n\nThe main goal of this GSoC project was to improve how researchers interact with OMOP CDM data in Julia by extending and strengthening the capabilities of **HealthBase.jl**. This involved building a structured, schema-aware interface for working with health data and providing built-in tools for preprocessing. Specifically, we focused on:\n\n1. **Introduce a schema-aware table interface for OMOP CDM**: Develop a new type of structure that wraps OMOP CDM tables in a consistent, validated format. This interface should use `Tables.jl` under the hood and provide column-level metadata, schema enforcement, and compatibility with downstream tabular workflows.\n\n2. **Implement reusable preprocessing utilities for health data workflows**: Add essential preprocessing functions like:\n   - `one_hot_encode` for converting categorical columns into binary indicators,\n   - `apply_vocabulary_compression` for grouping rare categories under a label,\n   - `map_concepts` and `map_concepts!` for translating concept IDs to readable names via DuckDB or user-defined mappings.\n\n3. **Integrate HealthBase.jl with the JuliaHealth ecosystem**: Ensure `HealthBase.jl` plays a foundational role in JuliaHealth by interoperating with other packages like `OMOPCommonDataModel.jl`, `Tables.jl`, `DuckDB.jl`, `DataFrames.jl` etc. This makes it easier to build reproducible, modular workflows within the Julia ecosystem.\n\nThese goals lay the foundation for future JuliaHealth tooling, making OMOP CDM data easier to validate, preprocess, and use in reproducible health data science workflows.\n\n# Tasks\n\n## 1. Core `HealthTable` Interface with `Tables.jl` Connection\n\nA major part of this project was introducing a new type called `HealthTable`, which makes it easier to work with OMOP CDM tables in Julia in a reliable and standardized way.\n\n### What is `HealthTable`?\n\n`HealthTable` is a wrapper around a Julia `DataFrame` that:\n\n- Validates your OMOP CDM data against the official OMOP CDM schema\n- Connects your data to Julia's `Tables.jl` interface, so you can use it with any table-compatible package (like `DataFrames.jl` etc.)\n- Attaches metadata about each column (e.g., what kind of concept it represents)\n- Gives detailed error messages if your data doesn't follow the expected OMOP CDM format\n- Uses `PrettyTables.jl` under the hood to display the table in a clean and readable format in the REPL or Jupyter notebooks\n\n### How is it defined?\n\nThe type is defined using Julia's `@kwdef` macro to allow keyword-based construction:\n\n```julia\n@kwdef struct HealthTable{T}\n    source::T\nend\n\nTables.schema(ht)                     # View schema (column names and types)\nTables.rows(ht)                       # Iterate over rows\nTables.columns(ht)                    # Access columns as named tuples\nTables.materializer(typeof(ht))       # Used to materialize tables\n```\nHere, source is the original validated data (usually a DataFrame), and all logic is built around enforcing the schema and providing utilities on top of this source. Once wrapped in a HealthTable, you can interact with it using the complete Tables.jl interface. This makes HealthTable compatible with the entire Julia Tables ecosystem, meaning users can directly use OMOP CDM data with existing tooling, without needing custom adapters.\n\n### Creating a `HealthTable`\n\n```julia\nusing DataFrames, OMOPCommonDataModel, InlineStrings, Serialization, Dates, FeatureTransforms, DBInterface, DuckDB\nusing HealthBase\n\ndf = DataFrame(\n    person_id = [1, 2, 3, 4],\n    gender_concept_id = [8507, 8532, 8507, 8532],\n    year_of_birth = [1990, 1985, 1992, 1980],\n    race_concept_id = [8527, 8516, 8527, 8527],\n)\n\nht = HealthTable(df; omop_cdm_version=\"v5.4.1\")\n```\n<br>\n![](./extension_loading.png)\n<br>\n<center>\n  HealthTable Extension Loading\n</center>\n<br>\n<center>\n  ![](./healthtable.png)\n  HealthTable\n</center>\n\n### Accessing the Source\n\nEach `HealthTable` instance stores the original validated data in `ht.source`:\n\n```julia\ntypeof(ht.source)                           # DataFrame\nmetadata(ht.source, \"omop_cdm_version\")     # \"v5.4.1\"\ncolmetadata(ht.source, :gender_concept_id)  # Per-column metadata\n```\n\n### Handling Invalid Tables\n\nIf the input table does not conform to the expected OMOP CDM schema - for example, if a column has the wrong data type is present - the HealthTable constructor throws a detailed and user-friendly error. This makes it easier to catch mistakes early and ensures that only well-structured, validated data enters your pipeline. You can optionally relax this strict enforcement by setting disable_type_enforcement = true, in which case the constructor will emit warnings instead of throwing errors.\n\n## 2. Preprocessing Functions\n\nOnce your data is wrapped in a `HealthTable`, you can apply several built-in preprocessing functions to prepare it for modeling. These functions help transform OMOP CDM data into formats that are more interpretable, compact, and ML-friendly.\n\n### Concept Mapping\n\nReplaces concept IDs (e.g., 8507) with readable names (e.g., \"Male\") using an OMOP CDM vocabulary table in DuckDB. If no schema is provided, the function will use the default main schema in the DuckDB connection. It supports both single and multiple columns, and allows custom naming for output columns. This greatly enhances data interpretability and allows models to work with semantically meaningful features.\n\n```julia\nconn = DBInterface.connect(DuckDB.DB, \"path_to_file.duckdb\")\n\n# Single column (adds gender_concept_id_mapped)\nht_mapped = map_concepts(ht, :gender_concept_id, conn; schema = \"schema_name\")\n\n# Multiple columns, drop original\nht_mapped2 = map_concepts(ht, [:gender_concept_id, :race_concept_id], conn;\n                          new_cols=[\"gender\", \"race\"], drop_original=true)\n\n# In-place variant\nmap_concepts!(ht, :gender_concept_id, conn; schema = \"schema_name\")\n```\n\n<br>\n<center>\n  ![](./map_concepts.png)\n  Map Concepts\n</center>\n<br>\n\nYou can also perform concept mapping manually without relying on a database connection. This is especially useful for smaller datasets or when you already know the categorical values. For instance, by defining a custom dictionary such as Dict(8507 => \"Male\", 8532 => \"Female\"), you can create a new column by mapping over the existing concept ID column using functions like Base.map or map!. This manual approach allows for flexible labeling and is particularly helpful during exploratory data analysis or early-stage prototyping when a full vocabulary table isn't available or necessary.\n\n### Vocabulary Compression\n\nGroups rare categorical values into an `\"Other\"` or a user-specified label to simplify high-cardinality columns. This is useful for reducing sparsity in features with many rare categories. The function calculates the frequency of each level and retains only those above a threshold, replacing the rest. It ensures that model inputs remain interpretable and avoids overfitting on underrepresented categories.\n\n```julia\nht_compressed = apply_vocabulary_compression(ht_mapped; cols = [:race_concept_id],\n                    min_freq = 2, other_label = \"Other\")\n```\n<br>\n<center>\n  ![](./vocab_compression.png)\n  Vocabulary Compression\n</center>\n\n### One-Hot Encoding\n\nConverts a categorical column into binary columns. This prepares your features for ML models that can't handle raw categorical values. The function works on both HealthTable and DataFrame objects and allows you to specify whether to drop the original column. It's especially useful when working with encoded health conditions, demographics, or other categorical features.\n\n\n```julia\nht_ohe = one_hot_encode(ht_compressed; cols = [:gender_concept_id, :race_concept_id])\n```\n\n<br>\n<center>\n  ![](./one_hot_encoding.png)\n  One Hot Encoding\n</center>\n<br>\n\nEach of these preprocessing functions is designed to be both composable and schema-aware. This means you can mix and match transformations like one-hot encoding, vocabulary compression, and concept mapping depending on the needs of your workflow. You have the flexibility to work directly with a HealthTable or switch to a regular DataFrame when needed. This modular design ensures that your data processing steps are reproducible and consistent across different JuliaHealth tools, making health data analysis more efficient, reliable, and seamlessly integrated with Julia's modern data ecosystem.\n\n# Contribution Beyond Coding\n\n## 1. Organizing Meetings and Communication\n\nThroughout the project, I had regular weekly meetings with my mentor, Jacob Zelko, where we discussed progress, clarified doubts, and made plans for the upcoming tasks. These sessions helped me better understand design decisions and refine my implementations with expert feedback. In addition to our meetings, I actively communicated via Zulip and Slack, where we discussed code behavior, errors, ideas, and other project-related decisions in detail. This consistent back-and-forth ensured a clear direction and rapid iteration.\n\n## 2. Engaging with the JuliaHealth Ecosystem\n\nBeyond contributing code to HealthBase.jl, I also engaged with the broader JuliaHealth ecosystem. After discussing with my mentor, I opened and contributed to issues in related JuliaHealth repositories identifying potential bugs and suggesting enhancements. These contributions aimed to improve the coherence and usability of JuliaHealth tools as a whole, not just within my assigned project. \n\n# Conclusion and Future Development\n\nContributing to HealthBase.jl during Phase 1 of GSoC has been a rewarding and insightful journey. It gave me the opportunity to dive deep into the structure of OMOP CDM, explore Julia's composable interfaces like `Tables.jl`, and build features that directly support observational health workflows. Learning to design with extensibility in mind, especially when working with healthcare data has shaped how I now approach open-source problems.\n\nLooking ahead, here are some of the directions Iâ€™d like to explore to further strengthen `HealthBase.jl` and its integration within the JuliaHealth ecosystem:\n\n- **Refine schema handling**  \n  Improve how internal schema checks reflect the structure of the underlying data source. This includes better alignment with OMOP CDM specifications and improved flexibility when dealing with edge cases or schema variations.\n\n- **Strengthen Tables.jl integration**  \n  Enhance the robustness of how `HealthTable` interacts with the `Tables.jl` interface - ensuring better compatibility and reducing any overhead when working with downstream packages like `DataFrames.jl`.\n\n- **Add new preprocessing functions**  \n  Extend the current toolkit by implementing more real-world utilities such as missing value imputation, cohort filtering etc.\n\n- **Address related issues in the ecosystem**  \n  Collaborate with maintainers to help resolve open issues related to the project in `OMOPCommonDataModel.jl`, especially [Issue #41](https://github.com/JuliaHealth/OMOPCommonDataModel.jl/issues/41) and [Issue #40](https://github.com/JuliaHealth/OMOPCommonDataModel.jl/issues/40)\n\nOverall, this phase has not only improved the package but also helped me grow in terms of design thinking, working with abstractions, and contributing to a larger ecosystem. I'm looking forward to what comes next and to making HealthBase even more useful for the JuliaHealth community and beyond.\n\n\n# Acknowledgements \n\nA big thank you to **Jacob S. Zelko** for being such a kind and thoughtful mentor throughout this project. His clear guidance, encouragement, and helpful feedback made a huge difference at every step. I'm also really thankful to the **JuliaHealth** community for creating such a welcoming and inspiring space to learn, build, and grow. It's been a joy to be part of it.\n\n[Jacob S. Zelko](https://jacobzelko.com): aka, [TheCedarPrince](https://github.com/TheCedarPrince)\n\n_Note: This blog post was drafted with the assistance of LLM technologies to support grammar, clarity and structure._\n\n",
    "supporting": [
      "gsoc-phase1_files"
    ],
    "filters": [],
    "includes": {}
  }
}